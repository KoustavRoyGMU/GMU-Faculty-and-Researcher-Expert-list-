titles,authors,date,source,descriptions,citations
Fast trigonometric functions using Intel’s SSE2 instructions,"Lars Nyland, MARK Snyder",2003,"Publisher Intel Tech. Rep., available online at: http://www. weblearn. hs-bremen. de/risse/RST/docs/Intel/03-041. pdf","The goal of this work was to answer one simple question: given that the trigonometric functions take hundreds of clock cycles to execute on a Pentium IV, can they be computed faster, especially given that all Intel processors now have fast floating-point hardware? The streaming SIMD extensions (SSE/SSE2) in every Pentium III and IV provide both scalar and vector modes of computation, so it has been our goal to use the vector hardware to compute the cosine and other trigonometric functions. The cosine function was chosen, as it has significant use in our research as well as in image construction with the discrete cosine transform.",11
Monad factory: Type-indexed monads,"Mark Snyder, Perry Alexander",2011,"Source Trends in Functional Programming: 11th International Symposium, TFP 2010, Norman, OK, USA, May 17-19, 2010. Revised Selected Papers 11","Monads provide a greatly useful capability to pure languages in simulating side-effects, but implementations such as the Monad Transformer Library [1] in Haskell prohibit reuse of those side-effects such as threading through two different states without some explicit work-around. Monad Factory provides a straightforward solution for opening the non-proper morphisms by indexing monads at both the type-level and term-level, allowing ‘copies’ of the monads to be created and simultaneously used within even the same monadic transformer stack. This expands monads’ applicability and mitigates the amount of boilerplate code we need for monads to work together, and yet we use them nearly identically to non-indexed monads.",9
Model composition in rosetta,"Nicolas Frisby, M Peck, Mark Snyder, Perry Alexander",2011/4/27,Conference 2011 18th IEEE International Conference and Workshops on Engineering of Computer-Based Systems,"We describe the various composition operations available in the Rosetta specification language, provide examples, and discuss reasoning compositionally about specified systems. Composing specifications allows for more than the usual benefits of modularity and re-use: reasoning about specifications also may rely explicitly on the nature of composition. Rosetta facilitates composition of differing views, called 'facets', of a system. This heterogeneous specification approach allows for separation of concerns and also admits any applicable multi-domain reasoning.",4
Trends in Functional Programming,"Zoltan Horvath, Viktoria Zsok, Peter Achten, Pieter Koopman",2010,"Publisher Intellect, Limited","The 11th Symposium on Trends in Functional Programming took place on the University of Oklahoma campus in Norman, Oklahoma, May 17-19, 2010. The program included presentations of 26 papers submitted by researchers from six nations and an invited talk by J. Strother Moore on machine reasoning so well received that the question/answer session continued for a full hour beyond the talk, well into the lunch period. Most of the authors submitted revisions of their papers, based in part on responses to their presentations. The revisions were reviewed and discussed in detail by the Program Committee, and 13 of them were accepted for publication in this volume. A little over half of the revisions accepted for publication were student papers (that is, papers with a student as first author). Following a long-established custom, the Program Committee designated one of them as the best student paper. This year the …",2
Writing composable software with interpreterlib,"Mark Snyder, Nicolas Frisby, Garrin Kimmell, Perry Alexander",2009,"Conference Software Composition: 8th International Conference, SC 2009, Zurich, Switzerland, July 2-3, 2009. Proceedings 8",InterpreterLib is a Haskell library for building and composing modular syntactic and semantic definitions. We identify two forms of composition within this domain. Composition along syntax combines semantics for denoting differing term spaces to a common denotational domain. Composition along semantics combines semantics for denoting a common term space to differing domains. We demonstrate these composition mechanisms by applying InterpreterLib to examples and then relate our experiences with InterpreterLib implementing tools for the Rosetta language.,2
Type Directed Specification Refinement,Mark Huntington Snyder,2011/8/31,Institution University of Kansas,"Specification languages serve a fundamentally different purpose than general-purpose programming languages, and their type systems reflect these needs. Specification type systems must record and track more information for us to reason about a system adequately, and this added expressiveness may lead to an undecidable typing analysis. System level design begins with a high-level specification that is continually refined and expanded with implementation details, constraints, and typing information, down to a concrete specification. During this refinement process, the system is underspecified, and many static analyses aren't applicable until the system is fully specified. However, partial specifications contain valuable information that can inform the refinement process--we can locally inspect parts of the specification from a typing perspective to look for inferrable information or inconsistencies early on to aid the refinement process. This work defines a typing analysis that gathers constraints and typing information to inform the specification refinement process. It explores localized techniques such as local type inference and tracking of values as a means of influencing the specification refinement process.",1
"Software Composition: 8th International Conference, SC 2009, Zurich, Switzerland, July 2-3, 2009, Proceedings","Alexandre Bergel, Johan Fabry",2009/6/30,Volume 5634,"The 8th International Conference on Software Composition, SC 2009, was held in Zürich, Switzerland, during July 2–3, 2009. Over the years SC has become an important and inspiring forum for researchers, practitioners, and students working in the broad field of software composition. This topic area was further explored by both high-quality paper presentations as well as two excellent invited speakers.",1
"A modular, algebra-sequenced paramorphic constraint-based type checker for Rosetta",Mark H Snyder,2007,Institution University of Kansas,"The objective of this thesis is to demonstrate the feasibility of performing static analysis, specifically type checking, in a particularly modular way. We use a term space of fixpoints of sums of functors so that, by writing individual type checkers for each portion of the entire language, we can then combine those algebras into an algebra that functions over the entire target language. The overall computational style employed uses a sequenced paramorphism to reduce the terms to the value space of types. As a proof of concept, this thesis presents a nominal typechecker in Haskell for the language Rosetta. It relies heavily on InterpreterLib, a Haskell library for designing interpreters in exactly the style described.",
Software Composition,Alexandre Bergel Johan Fabry,"The 8th International Conference on Software Composition, SC 2009, was held in Zürich, Switzerland, during July 2–3, 2009. Over the years SC has become an important and inspiring forum for researchers, practitioners, and students working in the broad field of software composition. This topic area was further explored by both high-quality paper presentations as well as two excellent invited speakers.In all, 34 submissions underwent a full review process by the Program Committee (PC). Only 10 were accepted for publication and presentation at the conference. The published papers were selected according to rigorous criteria covering relevance for the venue; contribution and innovation; precision and correctness; and presentation and clarity. Each paper received between three to five reviews, depending on whether authors were PC members. We endeavored to make SC 2009 a venue that encourages and …",Scholar articles Software CompositionABJ Fabry,"The 8th International Conference on Software Composition, SC 2009, was held in Zürich, Switzerland, during July 2–3, 2009. Over the years SC has become an important and inspiring forum for researchers, practitioners, and students working in the broad field of software composition. This topic area was further explored by both high-quality paper presentations as well as two excellent invited speakers.",
