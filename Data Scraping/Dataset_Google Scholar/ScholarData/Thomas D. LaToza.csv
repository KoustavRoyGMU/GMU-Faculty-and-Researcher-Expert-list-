titles,authors,date,source,descriptions,citations
Maintaining mental models: a study of developer work habits,"Thomas D LaToza, Gina Venolia, Robert DeLine",2006/5/28,Book Proceedings of the 28th international conference on Software engineering,"To understand developers' typical tools, activities, and practices and their satisfaction with each, we conducted two surveys and eleven interviews. We found that many problems arose because developers were forced to invest great effort recovering implicit knowledge by exploring code and interrupting teammates and this knowledge was only saved in their memory. Contrary to expectations that email and IM prevent expensive task switches caused by face-to-face interruptions, we found that face-to-face communication enjoys many advantages. Contrary to expectations that documentation makes understanding design rationale easy, we found that current design documents are inadequate. Contrary to expectations that code duplication involves the copy and paste of code snippets, developers reported several types of duplication. We use data to characterize these and other problems and draw implications for the …",821
A practical guide to controlled experiments of software engineering tools with human participants,"Amy J Ko, Thomas D LaToza, Margaret M Burnett",2015/2,Journal Empirical Software Engineering,"Empirical studies, often in the form of controlled experiments, have been widely adopted in software engineering research as a way to evaluate the merits of new software engineering tools. However, controlled experiments involving human participants actually using new tools are still rare, and when they are conducted, some have serious validity concerns. Recent research has also shown that many software engineering researchers view this form of tool evaluation as too risky and too difficult to conduct, as they might ultimately lead to inconclusive or negative results. In this paper, we aim both to help researchers minimize the risks of this form of tool evaluation, and to increase their quality, by offering practical methodological guidance on designing and running controlled experiments with developers. Our guidance fills gaps in the empirical literature by explaining, from a practical perspective, options in the …",229
"Crowdsourcing in software engineering: Models, motivations, and challenges","Thomas D LaToza, Andre van der Hoek",2016/1,Journal IEEE software,"Almost surreptitiously, crowdsourcing has entered software engineering practice. In-house development, contracting, and outsourcing still dominate, but many development projects use crowdsourcing-for example, to squash bugs, test software, or gather alternative UI designs. Although the overall impact has been mundane so far, crowdsourcing could lead to fundamental, disruptive changes in how software is developed. Various crowdsourcing models have been applied to software development. Such changes offer exciting opportunities, but several challenges must be met for crowdsourcing software development to reach its potential.",207
Developers ask reachability questions,"Thomas D LaToza, Brad A Myers",2010/5/1,Book Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering-Volume 1,"A reachability question is a search across feasible paths through a program for target statements matching search criteria. In three separate studies, we found that reachability questions are common and often time consuming to answer. In the first study, we observed 13 developers in the lab and found that half of the bugs developers inserted were associated with reachability questions. In the second study, 460 professional software developers reported asking questions that may be answered using reachability questions more than 9 times a day, and 82% rated one or more as at least somewhat hard to answer. In the third study, we observed 17 developers in the field and found that 9 of the 10 longest activities were associated with reachability questions. These findings suggest that answering reachability questions is an important source of difficulty understanding large, complex codebases.",187
Hard-to-answer questions about code,"Thomas D LaToza, Brad A Myers",2010/10/17,Book Evaluation and usability of programming languages and tools,"To build new tools and programming languages that make it easier for professional software developers to create, debug, and understand code, it is helpful to better understand the questions that developers ask during coding activities. We surveyed professional software developers and asked them to list hard-to-answer questions that they had recently asked about code. 179 respondents reported 371 questions. We then clustered these questions into 21 categories and 94 distinct questions. The most frequently reported categories dealt with intent and rationale -- what does this code do, what is it intended to do, and why was it done this way? Many questions described very specific situations -- e.g., what does the code do when an error occurs, how to refactor without breaking callers, or the implications of a specific change on security. These questions revealed opportunities for both existing research tools to help …",167
Program comprehension as fact finding,"Thomas D LaToza, David Garlan, James D Herbsleb, Brad A Myers",2007/9/7,Book Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering,"Little is known about how developers think about design during code modification tasks or how experienced developers' design knowledge helps them work more effectively. We performed a lab study in which thirteen developers worked for 3 hours under-standing the design of a 54 KLOC open source application. Par-ticipants had from 0 to 10.5 years of industry experience and were grouped into three ""experts"" and ten ""novices."" We observed that participants spent their time seeking, learning, critiquing, explain-ing, proposing, and implementing facts about the code such as ""getFoldLevel has effects"". These facts served numerous roles, such as suggesting changes, constraining changes, and predicting the amount of additional investigation necessary to make a change. Differences between experts and novices included that the experts explained the root cause of the design problem and made changes to …",139
Microtask programming: Building software with a crowd,"Thomas D LaToza, W Ben Towne, Christian M Adriano, André Van Der Hoek",2014/10/5,Book Proceedings of the 27th annual ACM symposium on User interface software and technology,"Microtask crowdsourcing organizes complex work into workflows, decomposing large tasks into small, relatively independent microtasks. Applied to software development, this model might increase participation in open source software development by lowering the barriers to contribu-tion and dramatically decrease time to market by increasing the parallelism in development work. To explore this idea, we have developed an approach to decomposing programming work into microtasks. Work is coordinated through tracking changes to a graph of artifacts, generating appropriate microtasks and propagating change notifications to artifacts with dependencies. We have implemented our approach in CrowdCode, a cloud IDE for crowd development. To evaluate the feasibility of microtask programming, we performed a small study and found that a small crowd of 12 workers was able to successfully write 480 lines of code …",112
Active code completion,"Cyrus Omar, Young Seok Yoon, Thomas D LaToza, Brad A Myers",2012/6/2,Conference 2012 34th International Conference on Software Engineering (ICSE),"Code completion menus have replaced standalone API browsers for most developers because they are more tightly integrated into the development workflow. Refinements to the code completion menu that incorporate additional sources of information have similarly been shown to be valuable, even relative to standalone counterparts offering similar functionality. In this paper, we describe active code completion, an architecture that allows library developers to introduce interactive and highly-specialized code generation interfaces, called palettes, directly into the editor. Using several empirical methods, we examine the contexts in which such a system could be useful, describe the design constraints governing the system architecture as well as particular code completion interfaces, and design one such system, named Graphite, for the Eclipse Java development environment. Using Graphite, we implement a palette …",106
Programmers are users too: Human-centered methods for improving programming tools,"Brad A Myers, Amy J Ko, Thomas D LaToza, YoungSeok Yoon",2016/7/4,Journal Computer,"Human-centered methods can help researchers better understand and meet programmers' needs. Because programming is a human activity, many of these methods can be used without change. However, some programmer needs require new methods, which can also be applied to domains other than software engineering. This article features five Web extras. The video at https://youtu.be/4PH9-qi-yTQ demonstrates Azurite, an Eclipse plug-in with a selective undo feature that lets programmers more easily backtrack their code. The video at https://youtu.be/gOSlR62-rd8 describes Graphite, an Eclipse plug-in offering active code completion, a simple but powerful technique that integrates useful code-generation tools directly into the editor. The video at https://youtu.be/zyrqcYxqDtI describes HANDS, a new programming system that emphasizes usability by building on children's and beginning programmers' natural …",102
Visualizing call graphs,"Thomas D LaToza, Brad A Myers",2011/9/18,Conference 2011 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"Developers navigate and reason about call graphs throughout investigation and debugging activities. This is often difficult: developers can spend tens of minutes answering a single question, get lost and disoriented, and erroneously make assumptions, causing bugs. To address these problems, we designed a new form of interactive call graph visualization - REACHER. Instead of leaving developers to manually traverse the call graph, REACHER lets developers search along control flow. The interactive call graph visualization encodes a number of properties that help developers answer questions about causality, ordering, type membership, repetition, choice, and other relationships. And developers remain oriented while navigating. To evaluate REACHER'S benefits, we conducted a lab study in which 12 participants answered control flow questions. Compared to an existing IDE, participants with REACHER were …",97
On the supply of building blocks,"David E Goldberg, Kumara Sastry, Thomas Latoza",2001/7/7,Book Proceedings of the 3rd Annual Conference on Genetic and Evolutionary Computation,This study addresses the issue of building-block supply in the initial population. Facetwise models for supply of a single building block as well as for supply of all schemata in a partition have been developed. An estimate for the population size required to ensure the presence of all raw building blocks has been derived using these facetwise models. The facetwise models and the population-sizing estimate are verified with computational results.,88
Crowd development,"Thomas D LaToza, W Ben Towne, André Van Der Hoek, James D Herbsleb",2013/5/25,Conference 2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"Crowd development is a development process designed for transient workers of varying skill. Work is organized into microtasks, which are short, self-descriptive, and modular. Microtasks recursively spawn microtasks and are matched to workers, who accrue points reflecting value created. Crowd development might help to reduce time to market and software development costs, increase programmer productivity, and make programming more fun.",71
Supporting informal design with interactive whiteboards,"Nicolas Mangano, Thomas D LaToza, Marian Petre, André van der Hoek",2014/4/26,Book Proceedings of the SIGCHI Conference on Human Factors in Computing Systems,"Whiteboards serve an important role in supporting informal design, providing a fluid and flexible medium for collaborative design. Interactive whiteboards offer the potential for enhanced support for manipulating content, managing sketches, and distributed work, but little is known about how this support affects the practice of informal design. To understand the opportunities and challenges, we first conducted a literature review, identifying 14 behaviors that occur during informal design. We then designed an interactive whiteboard system to support all of these behaviors and deployed the system to three groups of designers. Through usage logs and interviews, we examined the effects of interactivity on whiteboard use across a wide spectrum of design behaviors, identifying ways in which interactive whiteboards support the practices used in physical whiteboards and where they enable designers to work more …",58
Borrowing from the crowd: A study of recombination in software design competitions,"Thomas D LaToza, Micky Chen, Luxi Jiang, Mengyao Zhao, André Van Der Hoek",2015/5/16,Conference 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"One form of crowdsourcing is the competition, which poses an open call for competing solutions. Commercial systems such as TopCoder have begun to explore the application of competitions to software development, but have important limitations diminishing the potential benefits drawn from the crowd. In particular, they employ a model of independent work that ignores the opportunity for designs to arise from the ideas of multiple designers. In this paper, we examine the potential for software design competitions to incorporate recombination, in which competing designers are given the designs of others and encouraged to use them to revise their own designs. To explore this, we conducted two software design competitions in which participants were asked to produce both an initial and a revised design, drawing on lessons learned from the crowd. We found that, in both competitions, all participants borrowed ideas …",52
Codeexchange: Supporting reformulation of internet-scale code queries in context (T),"Lee Martie, Thomas D LaToza, André van der Hoek",2015/11/9,Conference 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE),"Programming today regularly involves searching for source code online, whether through a general search engine such as Google or a specialized code search engine such as SearchCode, Ohloh, or GitHub. Searching typically is an iterative process, with developers adjusting the keywords they use based on the results of the previous query. However, searching in this manner is not ideal, because just using keywords places limits on what developers can express as well as the overall interaction that is required. Based on the observation that the results from one query create a con-text in which a next is formulated, we present CodeExchange, a new code search engine that we developed to explicitly leverage this context to support fluid, expressive reformulation of queries. We motivate the need for CodeExchange, highlight its key design decisions and overall architecture, and evaluate its use in both a field …",37
How software designers interact with sketches at the whiteboard,"Nicolas Mangano, Thomas D LaToza, Marian Petre, André van der Hoek",2014/10/14,Journal IEEE Transactions on Software Engineering,"Whiteboard sketches play a crucial role in software development, helping to support groups of designers in reasoning about a software design problem at hand. However, little is known about these sketches and how they support design ‘in the moment’, particularly in terms of the relationships among sketches, visual syntactic elements within sketches, and reasoning activities. To address this gap, we analyzed 14 hours of design activity by eight pairs of professional software designers, manually coding over 4000 events capturing the introduction of visual syntactic elements into sketches, focus transitions between sketches, and reasoning activities. Our findings indicate that sketches serve as a rich medium for supporting design conversations. Designers often use general-purpose notations. Designers introduce new syntactic elements to record aspects of the design, or re-purpose sketches as the design develops …",35
Crowdsourcing for software engineering,"Klaas-Jan Stol, Thomas D LaToza, Christian Bird",2017/3/28,Journal IEEE software,"Crowdsourcing, which leverages the intelligence and contributions of a large group of people to achieve a specific goal, is disrupting business models and work practices. Because crowdsourcing approaches could have a far-reaching impact on future software development, this theme issue explores various ways developers and managers can benefit from these new opportunities. The Web Extra https://youtu.be/Z_8vWQjU7iY is an audio podcast of the introduction to the theme issue on crowdsourcing for software engineering.",34
Explicit programming strategies,"Thomas D LaToza, Maryam Arab, Dastyni Loksa, Amy J Ko",2020/7,Journal Empirical Software Engineering,"Software developers solve a diverse and wide range of problems. While software engineering research often focuses on tools to support this problem solving, the strategies that developers use to solve problems are at least as important. In this paper, we offer a novel approach for enabling developers to follow explicit programming strategies that describe how an expert tackles a common programming problem. We define explicit programming strategies, grounding our definition in prior work both within software engineering and in other professions which have adopted more explicit procedures for problem solving. We then present a novel notation called Roboto and a novel strategy tracker tool that explicitly represent programming strategies and frame executing strategies as a collaborative effort between human abilities to make decisions and computer abilities to structure process and persist information. In a …",32
A vision of crowd development,"Thomas D LaToza, Andre Van Der Hoek",2015/5/16,Conference 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"Crowdsourcing has had extraordinary success in solving a diverse set of problems, ranging from digitization of libraries and translation of the Internet, to scientific challenges such as classifying elements in the galaxy or determining the 3D shape of an enzyme. By leveraging the power of the masses, it is feasible to complete tasks in mere days and sometimes even hours, and to take on tasks that were previously impossible because of their sheer scale. Underlying the success of crowdsourcing is a common theme - the microtask. By breaking down the overall task at hand into microtasks providing short, self-contained pieces of work, work can be performed independently, quickly, and in parallel - enabling numerous and often untrained participants to chip in. This paper puts forth a research agenda, examining the question of whether the same kinds of successes that microtask crowdsourcing is having in …",30
Software development at microsoft observed,"Gina Venolia, Robert DeLine, Thomas LaToza",2005/10,"Journal Microsoft Research, TR","To understand Microsoft developers’ typical tools and work habits and their level of satisfaction with these, we performed two surveys and eleven interviews with developers across all business divisions. This report provides a summary of the resulting data. From the set of potential problems we gave them, the top three that Microsoft developers agree they have are: understanding the rationale behind a piece of code (66%); having to switch tasks often because of requests from teammates or managers (62%); and being aware of changes to code elsewhere that impact their own code (61%). The most notable take-away from the data is that developers go to great lengths to create and maintain rich mental models of code and don’t rely on external representations. The mental nature of these models requires frequent, disruptive, face-to-face meetings to keep individuals’ models in sync, which greatly slow the rate at …",30
Teaching explicit programming strategies to adolescents,"Amy J Ko, Thomas D LaToza, Stephen Hull, Ellen A Ko, William Kwok, Jane Quichocho, Harshitha Akkaraju, Rishin Pandit",2019/2/22,Book Proceedings of the 50th ACM technical symposium on computer science education,"One way to teach programming problem solving is to teach explicit, step-by-step strategies. While prior work has shown these to be effective in controlled settings, there has been little work investigating their efficacy in classrooms. We conducted a 5-week case study with 17 students aged 15-18, investigating students' sentiments toward two strategies for debugging and code reuse, students' use of scaffolding to execute these strategies, and associations between students' strategy use and their success at independently writing programs in class. We found that while students reported the strategies to be valuable, many had trouble regulating their choice of strategies, defaulting to ineffective trial and error, even when they knew systematic strategies would be more effective. Students that embraced the debugging strategy completed more features in a game development project, but this association was mediated by …",26
Advancing open science with version control and blockchains,"Jonathan Bell, Thomas D LaToza, Foteini Baldmitsi, Angelos Stavrou",2017/5/22,Conference 2017 IEEE/ACM 12th International Workshop on Software Engineering for Science (SE4Science),"The scientific community is facing a crisis of reproducibility: confidence in scientific results is damaged by concerns regarding the integrity of experimental data and the analyses applied to that data. Experimental integrity can be compromised inadvertently when researchers overlook some important component of their experimental procedure, or intentionally by researchers or malicious third-parties who are biased towards ensuring a specific outcome of an experiment. The scientific community has pushed for ""open science"" to add transparency to the experimental process, asking researchers to publicly register their data sets and experimental procedures. We argue that the software engineering community can leverage its expertise in tracking traceability and provenance of source code and its related artifacts to simplify data management for scientists. Moreover, by leveraging smart contract and blockchain …",25
Ask the crowd: Scaffolding coordination and knowledge sharing in microtask programming,"Thomas D LaToza, Arturo Di Lecce, Fabio Ricci, W Ben Towne, André Van Der Hoek",2015/10/18,Conference 2015 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"Programming work is inherently interdependent, requiring developers to share and coordinate decisions that crosscut the structure of code. This is particularly challenging for programming in a microtasking context, in which developers are assumed to be transient and thus cannot rely on traditional learning and coordination mechanisms such as an extended onboarding process and code ownership. In this paper, we explore scaffolding coordination and knowledge sharing through a question and answer system, structuring project knowledge and coordination into questions and answers. To investigate its potential for enabling coordination in a microtask setting, we implemented a Q&A system for microtask programming work and conducted a user study where a crowd used it to coordinate their work on a software project over a 30-hour period. The results reveal both the potential for the use of Q&A systems for …",20
Microtask programming,"Thomas D LaToza, Arturo Di Lecce, Fabio Ricci, W Ben Towne, Andre Van der Hoek",2018/4/5,Journal IEEE Transactions on Software Engineering,"Traditional forms of Crowdsourcing such as open source software development harness crowd contributions to democratize the creation of software. However, potential contributors must first overcome joining barriers forcing casually committed contributors to spend days or weeks onboarding and thereby reducing participation. To more effectively harness potential contributions from the crowd, we propose a method for programming in which work occurs entirely through microtasks, offering contributors short, self-contained tasks such as implementing part of a function or updating a call site invoking a function to match a change made to the function. In microtask programming, microtasks involve changes to a single artifact, are automatically generated as necessary by the system, and nurture quality through iteration. A study examining the feasibility of microtask programming to create small programs found that …",19
An exploratory study of live-streamed programming,"Abdulaziz Alaboudi, Thomas D LaToza",2019/10/14,Conference 2019 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"In live-streamed programming, developers broadcast their development work on open source projects using streaming media such as YouTube or Twitch. Sessions are first announced by a developer acting as the streamer, inviting other developers to join and interact as watchers using chat. To better understand the characteristics, motivations, and challenges in live-streamed programming, we analyzed 20 hours of live-streamed programming videos and surveyed 7 streamers about their experiences. The results reveal that live-streamed programming shares some of the characteristics and benefits of pair programming, but differs in the nature of the relationship between the streamer and watchers. We also found that streamers are motivated by knowledge sharing, socializing, and building an online identity, but face challenges with tool limitations and maintaining engagement with watchers. We discuss the …",18
More natural end-user software engineering,"Brad A Myers, Amy J Ko, Sun Young Park, Jeffrey Stylos, Thomas D LaToza, Jack Beaton",2008/5/12,Book Proceedings of the 4th international workshop on End-user software engineering,"The ""Natural Programming"" project at Carnegie Mellon University has been working for more than 10 years to make programming more ""natural"", or closer to the way people think. We have addressed the needs of all kinds of programmers: novices, professionals and end-user programmers. Many studies were performed which provided new insights and led to new models of programmers. From these insights and models, we created new programming languages and environments. Evaluations of the resulting systems have shown that they are effective and successful. This paper provides an overview of the entire 10-year Natural Programming project, but focuses on our new results since WEUSE-III in Dagstuhl.",18
Enabling a classroom design studio with a collaborative sketch design tool,"Dastyni Loksa, Nicolas Mangano, Thomas D LaToza, André van der Hoek",2013/5/18,Conference 2013 35th International Conference on Software Engineering (ICSE),"The use of a studio approach - a hands-on teaching method that emphasizes in-class discussion and activities - is becoming an increasingly accepted method of teaching within software engineering. In such studios, emphasis is placed not only on the artifacts to be produced, but also on the process used to arrive at those artifacts. In this paper, we introduce Calico, a sketch-based collaborative software design tool, and discuss how it supports the delivery of a studio approach to software design education. We particularly describe our experiences with Calico in Software Design I, a course aimed at introducing students to the early, creative phases of software design. Our results show that Calico enabled students to work effectively in teams on their design problems, quickly developing, refining, and evaluating their designs.",16
Designing useful tools for developers,"Thomas D LaToza, Brad A Myers",2011/10/24,Book Proceedings of the 3rd ACM SIGPLAN workshop on Evaluation and usability of programming languages and tools,"Designing useful tools for developers requires identifying and understanding an important problem developers face and designing a solution that addresses this problem. This paper describes a design process that uses data to understand problems, design solutions, and evaluate solutions' usefulness.",16
Questions about object structure during coding activities,"Marwan Abi-Antoun, Nariman Ammar, Thomas LaToza",2010/5/2,Book Proceedings of the 2010 ICSE Workshop on Cooperative and Human Aspects of Software Engineering,"Recent tools have been designed to help developers understand the potential runtime structure of objects in a system at compile time. Such tools let developers interactively explore diagrams of object structure. But do developers ask questions about object structure? If so, when?",16
Developer refinement of runtime architectural structure,"Marwan Abi-Antoun, Talia Selitsky, Thomas LaToza",2010/5/2,Book Proceedings of the 2010 ICSE Workshop on Sharing and Reusing Architectural Knowledge,"Runtime architecture is important because it helps reason about quality attributes such as performance and security. We conducted an on-site field study to help us understand how developers understand object relationships, and what tool features a developer might need to convey their mental model of object relationships.",15
On the importance of understanding the strategies that developers use,"Thomas D LaToza, Brad A Myers",2010/5/2,Book Proceedings of the 2010 ICSE Workshop on Cooperative and Human Aspects of Software Engineering,"Understanding the strategies that developers use during coding activities is an important way to identify challenges developers face and the corresponding opportunities for tools, languages, or processes to better address the challenges and more effectively support the strategies. After creating a design, evaluation studies often measure task success, time, and bugs to argue that the design improves programmer productivity. Considering the strategies that developers use while conducting these studies increases the likelihood of a successful test and makes the results easier to generalize. Therefore, we believe that identifying strategies developers use is an important goal. Beyond identifying strategies, there are also research opportunities in better understanding how developers choose strategies.",13
Active documentation: Helping developers follow design decisions,"Sahar Mehrpour, Thomas D LaToza, Rahul K Kindi",2019/10/14,Conference 2019 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"Good documentation has long been argued to be key to helping developers write code more quickly and consistently with design decisions, but is left largely disconnected from code. We propose a method for active documentation, where design decisions are made explicit as design rules and checked against code. Developers can discover how to follow a design rule by navigating to examples in their codebase. After editing code, developers receive immediate feedback about which design rules are satisfied and which are violated, notifying developers who miss design decisions about the existence of these design decisions. We implemented our approach in a prototype tool and conducted a user study. Compared to developers using a traditional design document, developers working in an unfamiliar codebase with active documentation were faster and more successful, using active documentation to learn how …",9
A study of architectural decision practices,"Thomas D LaToza, Evelina Shabani, André van der Hoek",2013/5/25,Conference 2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"Architectural decisions shape a software architecture and determine its ability to meet its requirements. To better understand architectural decisions in practice, we interviewed developers at two organizations. The results revealed that architectural decisions often become technology decisions, which are in turn influenced by both technical and social factors. Meetings and knowledge repositories help to communicate architectural decisions, but code reviews are ultimately necessary to ensure conformance. Costly changes to architectural decisions are caused by the discovery of an Achilles' heel, an important scenario that cannot be supported by an architectural decision. These findings suggest an important need for social development tools that help developers more easily and successfully share valuable technology knowledge and more effectively make technology choices.",9
Supporting software engineering research and education by annotating public videos of developers programming,"Abdulaziz Alaboudi, Thomas D LaToza",2019/5/27,Conference 2019 IEEE/ACM 12th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"Software engineering has long studied how software developers work, building a body of work which forms the foundation of many software engineering best practices, tools, and theories. Recently, some developers have begun recording videos of themselves engaged in programming tasks contributing to open source projects, enabling them to share knowledge and socialize with other developers. We believe that these videos offer an important opportunity for both software engineering research and education. In this paper, we discuss the potential use of these videos as well as open questions for how to best enable this envisioned use. We propose creating a central repository of programming videos, enabling analyzing and annotating videos to illustrate specific behaviors of interest such as asking and answering questions, employing strategies, and software engineering theories. Such a repository would offer …",8
An exploratory study of debugging episodes,"Abdulaziz Alaboudi, Thomas D LaToza",2021/5/5,Journal arXiv preprint arXiv:2105.02162,"Many studies have long investigated how developers debug, shaping our understanding of debugging and helping motivate the creation of more effective tools. However, less is known about the typical progression of debugging in real world settings. In this study, we focus on characterizing debugging episodes from the moment at which developers first encounter a defect to the moment at which it is resolved. We investigate the typical duration and frequency of debugging episodes and the typical activities which occur. We observed developers by watching professional developers at work in live-streamed programming sessions. Using this data source, we curated 15 sessions in which 11 professional developers worked for 30 hours. We then systematically coded the debugging episodes and activities that occurred within these videos, yielding a dataset of 2137 debugging activities and 1407 programming activities. We found that debugging was frequent, even in programming work, occurring once every eight minutes. Debugging episodes vary greatly in time, with most being less than a few minutes and a few as more than 100 minutes. However, most debugging time is spent in long debugging episodes. We found no single activity that dominated debugging time, and long debugging episodes often involved many diverse activities. Finally, we found that,in terms of the activities developers did, programming and debugging were remarkably similar, particularly in the frequency of editing and browsing code.",7
Using hypotheses as a debugging aid,"Abdulaziz Alaboudi, Thomas D LaToza",2020/8/10,Conference 2020 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"As developers debug, developers formulate hypotheses about the cause of the defect and gather evidence to test these hypotheses. To better understand the role of hypotheses in debugging, we conducted two studies. In a preliminary study, we found that, even with the benefit of modern internet resources, incorrect hypotheses can cause developers to investigate irrelevant information and block progress. We then conducted a controlled experiment where 20 developers debugged and recorded their hypotheses. We found that developers have few hypotheses, two per defect. Having a correct hypothesis early strongly predicted later success. We also studied the impact of two debugging aids: fault locations and potential hypotheses. Offering fault locations did not help developers formulate more correct hypotheses or debug more successfully. In contrast, offering potential hypotheses made developers six times …",7
Can microtask programming work in industry?,"Shinobu Saito, Yukako Iimura, Emad Aghayi, Thomas D LaToza",2020/11/8,Book Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,"A critical issue in software development projects in IT service companies is finding the right people at the right time. By enabling assignments of tasks to people to be more fluid, the use of crowdsourcing approaches within a company offers a potential solution to this challenge. Inside a company, as multiple system development projects are ongoing separately, developers with slack time on one project might use this time to contribute to other projects. In this paper, we report on a case study of the application of crowdsourcing within an industrial web application system development project in a large telecommunications company. Developers worked with system specifications which were organized into a set of microtasks, offering a set of short and self-contained descriptions. When crowd workers in other projects had slack time, they fetched and completed microtasks. Our results offer initial evidence for the potential …",6
Harnessing the crowd: Decontextualizing software work,"Thomas D LaToza, W Ben Towne, AVD Hoek",2014,Journal Proc. International Workshop on Context in Software Development Workshop,"Organizing software work into self-contained, low-context microtasks opens new opportunities for software development, reducing the barriers to contribute to software work and enabling software projects to be more fluid. Achieving this vision requires understanding the role of context in software development and designing new approaches for managing context.",6
Answering reachability questions,Thomas David LaToza,2012,Institution Carnegie Mellon University,"Software developers understanding and exploring code spend much of their time asking questions and searching for answers. Yet little has been known about the questions developers ask, the strategies used to answer them, and the challenges developers face. Through interviews, surveys, and observations, a series of 7 studies were conducted that begin to address this gap, contributing a better understanding of developers' tools, practices, problems, questions, and strategies, and a model of how developers reconstruct design decisions from code. A design process is described for using studies of developers' work to design more useful tools for developers.",6
Crowdsourced behavior-driven development,"Emad Aghayi, Thomas D LaToza, Paurav Surendra, Seyedmeysam Abolghasemi",2021/1/1,Journal Journal of Systems and Software,"Key to the effectiveness of crowdsourcing approaches for software engineering is workflow design, describing how complex work is organized into small, relatively independent microtasks. This paper, we introduce a Behavior-Driven Development (BDD) workflow for accomplishing programming work through self-contained microtasks, implemented as a preconfigured environment called CrowdMicroservices. In our approach, a client, acting on behalf of a software team, describes a microservice as a set of endpoints with paths, requests, and responses. A crowd then implements the endpoints, identifying individual endpoint behaviors that they test, implement, debug, create new functions, and interact with persistence APIs as needed. To evaluate our approach, we conducted a feasibility study in which a small crowd worked to implement a small ToDo microservice. The crowd created an implementation with only four …",5
Rulepad: interactive authoring of checkable design rules,"Sahar Mehrpour, Thomas D LaToza, Hamed Sarvari",2020/11/8,Book Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,"Good documentation offers the promise of enabling developers to easily understand design decisions. Unfortunately, in practice, design documents are often rarely updated, becoming inaccurate, incomplete, and untrustworthy. A better solution is to enable developers to write down design rules which are checked against code for consistency. But existing rule checkers require learning specialized query languages or program analysis frameworks, creating a barrier to writing project-specific rules. We introduce two new techniques for authoring design rules: snippet-based authoring and semi-natural-language authoring. In snippet-based authoring, developers specify characteristics of elements to match by writing partial code snippets. In semi-natural language authoring, a textual representation offers a representation for understanding design rules and resolving ambiguities. We implemented these approaches in …",5
Editable AI: mixed human-AI authoring of code patterns,"Kartik Chugh, Andrea Y Solis, Thomas D LaToza",2019/10/14,Conference 2019 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"Developers authoring HTML documents define elements following patterns which establish and reflect the visual structure of a document, such as making all images in a footer the same height by applying a class to each. To surface these patterns to developers and support developers in authoring consistent with these patterns, we propose a mixed human-AI technique for creating code patterns. Patterns are first learned from individual HTML documents through a decision tree, generating a representation which developers may view and edit. Code patterns are used to offer developers autocomplete suggestions, list examples, and flag violations. To evaluate our technique, we conducted a user study in which 24 participants wrote, edited, and corrected HTML documents. We found that our technique enabled developers to edit and correct documents more quickly and create, edit, and correct documents more …",4
A literature review of clone detection analysis,Thomas LaToza,2005,Publisher Carnegie Mellon University,"Code clones, pieces of code similar enough to be considered duplicates or clones of the same functionality, are a problem. Despite beliefs that code should never be copied and pasted and agile dictums that all duplication be removed, there are frequently good reasons to copy and paste code. Developers wish to do be able to do something implemented elsewhere that they can’t call directly. This might be because the code makes assumptions or design decisions that the developers need to change. Or the code might be contained in a module that can’t be called either for architectural reasons or even for organizational reasons. Clones may also be reimplemented code where developers repeatedly introduce the same code into the code base. Developers working on large code bases might not know that someone has already solved their problem, especially in cases where the solution is treated as a secret hidden behind interfaces rather than exposed functionality to be reused. Developers may reimplement quicksort or a graph traversal algorithm by copying code from google or looking it up in their favorite textbook.",4
An exploratory study of sharing strategic programming knowledge,"Maryam Arab, Thomas D LaToza, Jenny Liang, Amy J Ko",2022/4/27,Book Proceedings of the 2022 CHI Conference on Human Factors in Computing Systems," In many domains, strategic knowledge is documented and shared through checklists and handbooks. In software engineering, however, developers rarely share strategic knowledge for approaching programming problems, in contrast to other artifacts and despite its importance to productivity and success. To understand barriers to sharing, we simulated a programming strategy knowledge-sharing platform, asking experienced developers to articulate a programming strategy and others to use these strategies while providing feedback. Throughout, we asked strategy authors and users to reflect on the challenges they faced. Our analysis revealed that developers could share strategic knowledge. However, they struggled in choosing a level of detail and understanding the diversity of the potential audience. While authors required substantial feedback, users struggled to give it and authors to interpret it. Our results …",3
Edit-Run Behavior in Programming and Debugging,"Abdulaziz Alaboudi, Thomas D LaToza",2021/10/10,Conference 2021 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"As developers program and debug, they continuously edit and run their code, a behavior known as edit-run cycles. While techniques such as live programming are intended to support this behavior, little is known about the characteristics of edit-run cycles themselves. To bridge this gap, we analyzed 28 hours of programming and debugging work from 11 professional developers which encompassed over three thousand development activities. We mapped activities to edit or run steps, constructing 581 debugging and 207 programming edit-run cycles. We found that edit-run cycles are frequent. Developers edit and run the program, on average, 7 times before fixing a defect and twice before introducing a defect. Developers waited longer before again running the program when programming than debugging, with a mean cycle length of 3 minutes for programming and 1 minute for debugging. Most cycles involved an …",3
Implementing microservices through microtasks,"Emad Aghayi, Thomas D LaToza, Paurav Surendra, Seyedmeysam Abolghasemi",2019/3,Journal Int. J. Comput.,"Microtask programming is a form of crowdsourcing for programming in which implementation work is decomposed into short, self-contained microtasks. Each microtask offers a specific goal (eg, write a unit test) as well as all of the required context and environment support necessary to accomplish this goal. Key to microtasking is the choice of workflow, which delineates the microtasks developers may complete and how contributions from each are aggregated to generate the final software product. Existing approaches either rely on a single developer to manually generate all microtasks, limiting their potential scalability, or impose coordination requirements which limit their effectiveness. Inspired by behavior-driven development, we describe a novel workflow for decomposing programming into microtasks in which each microtask involves identifying, testing, implementing, and debugging an individual behavior within a single function. We apply this approach to the implementation of microservices, demonstrating the first approach for implementing a microservice through microtasks. To evaluate our approach, we conducted a user study in which a small crowd worked to implement a simple microservice and test suite. We found that the crowd was able to use a behavior-driven microtask workflow to successfully complete 350 microtasks and implement 13 functions, quickly onboard and submit their first microtask in less than 24 minutes, contribute new behaviors in less than 5 minutes, and together implement a functioning microservice with only four defects. We discuss these findings and their implications for incorporating microtask work into open …",3
Crowdcode: a platform for crowd development,"Thomas D LaToza, Eric Chiquillo, W Ben Towne, Christian Adriano, André van der Hoek",2013,Volume 2013,"Microtask crowdsourcing organizes complex work into workflows, decomposing large tasks into small, independent tasks performed by workers who are assumed to be transient and possibly unreliable.",3
Searching across paths,"Thomas D LaToza, Brad A Myers",2010/5/1,"Book Proceedings of 2010 ICSE Workshop on Search-driven Development: Users, Infrastructure, Tools and Evaluation","Observations of developers indicate that developers try to answer a variety of questions by searching across control flow paths through a program for statements matching search criteria. We believe that tools that better support this activity can help developers answer these questions more easily, quickly, and accurately.",3
ChatGPT and Software Testing Education: Promises & Perils,"Sajed Jalil, Suzzana Rafi, Thomas D LaToza, Kevin Moran, Wing Lam",2023/2/7,Journal arXiv preprint arXiv:2302.03287,"Over the past decade, predictive language modeling for code has proven to be a valuable tool for enabling new forms of automation for developers. More recently, we have seen the advent of general purpose ""large language models"", based on neural transformer architectures, that have been trained on massive datasets of human written text spanning code and natural language. However, despite the demonstrated representational power of such models, interacting with them has historically been constrained to specific task settings, limiting their general applicability. Many of these limitations were recently overcome with the introduction of ChatGPT, a language model created by OpenAI and trained to operate as a conversational agent, enabling it to answer questions and respond to a wide variety of commands from end-users. The introduction of models, such as ChatGPT, has already spurred fervent discussion from educators, ranging from fear that students could use these AI tools to circumvent learning, to excitement about the new types of learning opportunities that they might unlock. However, given the nascent nature of these tools, we currently lack fundamental knowledge related to how well they perform in different educational settings, and the potential promise (or danger) that they might pose to traditional forms of instruction. As such, in this poster, we examine how well ChatGPT performs when tasked with solving common questions in a popular software testing curriculum. Our findings indicate that ChatGPT can provide correct or partially correct answers in 44% of cases, provide correct or partially correct explanations of answers in 57 …",2
"HowToo: A Platform for Sharing, Finding, and Using Programming Strategies","Maryam Arab, Jenny Liang, Yang Yoo, Amy J Ko, Thomas D LaToza",2021/10/10,Conference 2021 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"Developers rely heavily on resources to find technical insights on how to use languages, APIs, and platforms, seeking help from Stack Overflow, GitHub, meetups, blogs, live streams, forums, documentation, and more. However, there is one kind of knowledge for which resources are hard to find: strategic knowledge. In contrast to technical knowledge, strategic knowledge provides insight into how to approach problem-solving. Prior work has demonstrated that developers can make use of written strategies to improve their problem-solving. However, there is currently no way for developers to share, curate, and search for this knowledge at scale. To address this gap, we contribute HowToo, a platform for sharing, finding, and using programming strategies. Its key insight is that there are many different approaches to the same problem, and developers may need different strategies depending on their situation. In a …",2
"Catalyzing the Agility, Accessibility, and Predictability of the Manufacturing-Entrepreneurship Ecosystem through Design Environments and Markets for Virtual Things.","Alexander Brodsky, Yotam I Gingold, Thomas D LaToza, Lap-Fai Yu, Xu Han",2021,Conference ICORES,"Proposed is a fundamentally new approach to manufacturing as a service based on a market of virtual things: parameterized products and services that can be searched, composed and optimized, while hiding the underlying complexity of product designs and manufacturing service networks. The approach includes (1) a mathematical framework, composition and decision guidance for virtual things;(2) bootstrapping the market with novel computational techniques and tools to reuse the distributed wealth of existing product and process designs by generalizing them into models of virtual things; and,(3) intelligent computational design tools for entrepreneurs. The goal is to catalyze the agility, accessibility and predictability of the manufacturingentrepreneurship ecosystem, transforming the Future of Manufacturing.",2
Find Unique Usages: Helping Developers Understand Common Usages,"Emad Aghayi, Aaron Massey, Thomas D LaToza",2020/8/10,Conference 2020 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"When working in large and complex codebases, developers face challenges using Find Usages to understand how to reuse classes and methods. To better understand these challenges, we conducted a small exploratory study with 4 participants. We found that developers often wasted time reading long lists of similar usages or prematurely focused on a single usage. Based on these findings, we hypothesized that clustering usages by the similarity of their surrounding context might enable developers to more rapidly understand how to use a function. To explore this idea, we designed and implemented Find Unique Usages, which extracts usages, computes a diff between pairs of usages, generates similarity scores, and uses these scores to form usage clusters. To evaluate this approach, we conducted a controlled experiment with 12 participants. We found that developers with Find Unique Usages were …",2
Answering common questions about code,Thomas D LaToza,2008/5/10,Book Companion of the 30th international conference on Software engineering,"Difficulties understanding update paths while un-derstanding code cause developers to waste time and insert bugs. A detailed investigation of these difficulties suggests that a wide variety of problems could be addressed by more easily answering questions about update paths that existing tools do not answer. We are designing a feasible update path static analysis to compute these paths and a visualization for asking questions and displaying results. In addition to grounding the questions we answer and tailoring the program analysis in data, we will also evaluate the usefulness of our tool using lab and field studies.",2
Programming tools for working with design decisions in code,"Sahar Mehrpour, Thomas D LaToza",2021,Conference the Workshop on the Evaluation of the Usability of Programming Languages and Tools (PLATEAU),,1
Crowd microservices hackathon: Utilizing crowdsourcing for microtask programming on a large-scale,"Aarushi Dubey, Thomas LaToza, Emad Aghayi Emad Aghayi",2019/11/19,Journal Journal of Student-Scientists' Research,"Developers in the working community often face the difficulty of training quickly into a new project, especially with new software. Building software through microtask programming offers new opportunities for enabling software developers to more easily join software projects as well as reduce the time to market. In microtask programming, all software development work occurs through microtasks, short self-contained 10 minute tasks. Microtask programming offers new opportunities for software projects by reducing the amount of project knowledge developers must learn to contribute and enabling more work to be done in parallel. To better explore the scalability of microtask programming to realistic software projects, we are currently planning a large-scale virtual ‘hackathon’. Participants will work to build a microservice for “Where”, a map web app for the Mason campus which helps students with finding the way to …",1
Human-Centered Methods to Boost Productivity,"Brad A Myers, Amy J Ko, Thomas D LaToza, YoungSeok Yoon",2019,Journal Rethinking Productivity in Software Engineering,"Since programming is a human activity, we can look to fields which have already developed methods for better understanding the details of human interactions with technologies. In particular, the field of human-computer interaction (HCI) has dozens, if not hundreds, of methods that have been validated for answering a wide range of questions about human behaviors. (And many of these methods, in turn, have been adapted from methods used in psychology, ethnography, sociology, etc.) For example, in our research, we have documented the use of at least 10 different human-centered methods across all the phases of software development, almost all of which have impacts on programmer productivity.",1
2nd international workshop on crowd sourcing in software engineering (CSI-SE 2015),"Gordon Fraser, Thomas D LaToza, Leonardo Mariani",2015/5/16,Conference 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"Crowdsourcing is increasingly revolutionizing the ways in which software is engineered. Programmers increasingly crowdsource answering their questions through Q&A sites. Non-programmers may contribute human-intelligence to development projects, by, for example, usability testing software or even play games with a purpose to implicitly construct formal specifications. Crowdfunding helps to democratize decisions about what software to build. Software engineering researchers may even benefit from new opportunities to evaluate their work with real developers by recruiting developers from the crowd. CSI- SE will inform the software engineering community of current techniques and trends in crowdsourcing, discuss the application of crowdsourcing to software engineering to date, and identify new opportunities to apply crowdsourcing to solve software engineering problems.",1
Can static analysis tools find more defects? A qualitative study of design rule violations found by code review,"Sahar Mehrpour, Thomas D LaToza",2023/2,Journal Empirical Software Engineering,"Static analysis tools find defects in code, checking code against rules to reveal potential defects. Many studies have evaluated these tools by measuring their ability to detect known defects in code. But these studies measure the current state of tools rather than their future potential to find more defects. To investigate the prospects for tools to find more defects, we conducted a study where we formulated each issue raised by a code reviewer as a violation of a rule, which we then compared to what static analysis tools might potentially check. We first gathered a corpus of 1323 defects found through code review. Through a qualitative analysis process, for each defect we identified a violated rule and the type of Static Analysis Tool (SAT) which might check this rule. We found that SATs might, in principle, be used to detect as many as 76% of code review defects, considerably more than current tools have been …",
A Qualitative Study on the Implementation Design Decisions of Developers,"Jenny T Liang, Maryam Arab, Minhyuk Ko, Amy J Ko, Thomas D LaToza",2023/1/24,Journal arXiv preprint arXiv:2301.09789,"Decision-making is a key software engineering skill. Developers constantly make choices throughout the software development process, from requirements to implementation. While prior work has studied developer decision-making, the choices made while choosing what solution to write in code remain understudied. In this mixed-methods study, we examine the phenomenon where developers select one specific way to implement a behavior in code, given many potential alternatives. We call these decisions implementation design decisions. Our mixed-methods study includes 46 survey responses and 14 semi-structured interviews with professional developers about their decision types, considerations, processes, and expertise for implementation design decisions. We find that implementation design decisions, rather than being a natural outcome from higher levels of design, require constant monitoring of higher level design choices, such as requirements and architecture. We also show that developers have a consistent general structure to their implementation decision-making process, but no single process is exactly the same. We discuss the implications of our findings on research, education, and practice, including insights on teaching developers how to make implementation design decisions.",
Theories of Programming (Dagstuhl Seminar 22231),"Thomas D LaToza, Amy Ko, David C Shepherd, Dag Sjøberg, Benjamin Xie",2023,Conference Dagstuhl Reports,"Much of computer science research focuses on techniques to make programming easier, better, less error prone, more powerful, and even more just. But rarely do we try to explain any of these challenges. Why is programming hard? Why is it slow? Why is it error prone? Why is it powerful? How does it do harm? These why and how questions are what motivated the Dagstuhl Seminar 22231 on Theories of Programming. This seminar brought together 28 CS researchers from domains most concerned with programming human and social activities: software engineering, programming languages, human-computer interaction, and computing education. Together, we sketched new theories of programming and considered the role of theories more broadly in programming.",
A controlled experiment on the impact of microtasking on programming,"Emad Aghayi, Thomas D LaToza",2023/1,Journal Empirical Software Engineering,"In microtask programming, developers complete short self-contained microtasks through the use of a specialized programming environment. For example, given only a short description of the purpose of a function and a partially complete implementation, a developer might be asked to identify, test, and implement an additional behavior in the function. Adopting a microtask approach to programming tasks has been envisioned to offer a number of potential benefits, including reducing the onboarding time necessary for new developers to contribute to a project and achieving higher project velocity by enabling larger project teams and greater parallelism. To investigate the potential benefits and drawbacks of microtask programming we conducted a controlled experiment. We focused our investigation on the context in which microtasking is most widely used, implementing and debugging function bodies, and …",
Connecting Design to Code,Thomas D LaToza,2022/12/20,Journal IEEE Software,How can developers use what they know about design to more effectively understand code? This article explores the ways in which the brain helps developers understand code and how this process can be facilitated through tools and processes that help understand code in terms of its design.,
Barriers in Front-End Web Development,"David I Samudio, Thomas D LaToza",2022/9/12,Conference 2022 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"Developers building web applications constantly face challenges, particularly in working with complex APIs. In response, developers often turn to Stack Overflow, offering a window into the programming barriers developers face. We examined 301 posts on Stack Overflow related to front-end web development and systematically characterized the challenges present in these posts. We found that most challenges reflected not a request for new code or an explanation of an error message but a request about how a specific code snippet might be edited to make its behavior as desired. Many challenges also reflected an underlying need to gather information about how specific code idioms are implemented within a framework or library. We identified 28 barriers developers face in front-end web development. Our findings suggest opportunities for facilitating more effective interactions with complex APIs through new …",
Microtask Programming Hackathon,"BRYANT PARK, ARYAN KUMAWAR, Thomas LaToza",2021,Journal Journal of Student-Scientists' Research,"Microtask programming is a novel approach to software development which reduces context by dividing a project into self-contained microtasks, reducing barriers developers face to contribute to a new project. Microtask programming may enable more developers to work in parallel and reduce the time necessary to complete projects. However, microtask programming has, to date, only been used with small crowds of developers. To examine its potential at scale, we will organize a microtask programming hackathon involving many developers. A microtask programming hackathon differs from traditional hackathons, in that participants work on a single large project rather than many small projects and compete as individuals rather than in groups. We intend the hackathon to simulate a possible use case for microtask programming for rapid product development.",
Mining Design Rules,"NEHA KONDURU, MUSTAFA LONANDWALA, Sahar Mehrpour, Thomas LaToza",2021,Journal Journal of Student-Scientists' Research,"Design rules capture guidelines that help ensure that code is organized and written correctly. Active Documentation is a tool that allows developers to document their own design decisions that can be checked against code. Recent work has explored ways to mine these rules from code by looking for frequent co-occurring features within code. However, it is unclear what types of code features are most important to include and how effective this may be in identifying design rules. To answer these questions, we searched for design rules and best practices related to the Fragment and Activity APIs in Android. To test the performance of the technique, we also ran the tool on codebases that included known design rules to see if it could discover these rules. We found a variety of types of design rules that were not yet able to be detected, including specific types of method parameters, function calls, and method call chains …",
A JupyterLab Plugin for Data Science Best Practices,"AARAV BAJAJ, ANYA PAREKH, SARAH ALI, Sahar Mehrpour, Yang Yoo, Thomas LaToza",2021,Journal Journal of Student-Scientists' Research,"Data Science is a multidisciplinary approach to extract insights from large volumes of data. It involves preparing and processing data, and performing analysis to reveal patterns. Due to its widespread application and important benefits, many developers often need to learn how to do data science effectively. However, they face many barriers learning the best practices they need to be successful. To better understand these best practices, we first examined tutorials and StackOverflow posts, documenting specific best practices important for success. We explored how new programming tools might better support developers in learning best practices by building a series of mockups. We then focused on a specific best practice, hyperparameter optimization, the process of configuring a machine learning model for a specific problem. We developed an early prototype of a plugin for a popular data science environment …",
Hypothesis Based Debugging,"ANSH CHAURASIA, HENRY ZHENG, Thomas LaToza, Abdulaziz Alaboudi",2021,Journal Journal of Student-Scientists' Research,"Reliance on technology has created greater demand for successfully functioning software. However, software developers often face progress-impeding programming â€ œbugsâ€. When debugging code, developers either formulate their own hypotheses-a theory for why the program is not functioning as intended-or look on specific websites for generalized solutions to adapt to their own scenario. However, these sites don't ensure that developers will discover a solution and developers occasionally lack the knowledge to formulate the correct hypotheses, potentially leading to significant losses in time. Therefore, it is worthwhile to develop tools to flag risky lines of code and provide a set of probable hypotheses that correlate unexpected behaviors with certain lines of code. The major focus of the research project has been to create a large database of errors and hypotheses and determine how to present relevant …",
Rethinking Debugging and Debuggers,"Abdulaziz Alaboudi, Thomas D LaToza",2021/1,Publisher Plateau Workshop,"What is debugging? Despite dozens of studies of debugging, many important questions remain. Most existing studies are limited in focusing on studying debugging in the lab or through log data, leaving less known about how debugging occurs in everyday work. To fill this gap, we first identified a new source of data — livestreamed programming — with which to examine debugging in the field. Using this data, we then examined the activities developers do when debugging and the relationship between debugging and programming. This revealed many interesting findings. For example, navigation constitutes only 15% of debugging time, while editing and running code constitute a majority of time. These studies suggest that creating understanding of the issue and fix is central to the debugging process, a process shaped by how developers formulate and test hypotheses. We believe there is an important opportunity …",
Information Needs: Lessons for Programming Tools,Thomas D LaToza,2020/8/4,Source IEEE Software,Why is programming sometimes so frustrating and annoying and other times so fast and painless? This article surveys a few of the important lessons emerging from studies of programming and the new programming tools they motivate.,
An Exploratory Study of Writing and Revising Explicit Programming Strategies,"Maryam Arab, Thomas D LaToza, Amy J Ko",2020/4/1,Journal arXiv preprint arXiv:2004.00701,"Knowledge sharing plays a crucial role throughout all software application development activities. When programmers learn and share through media like Stack overflow, GitHub, Meetups, videos, discussion forums, wikis, and blogs, every developer benefits. However, there is one kind of knowledge that developers share far less often: strategic knowledge for how to approach programming problems (e.g., how to debug server-side Python errors, how to resolve a merge conflict, how to evaluate the stability of an API one is considering for adoption). In this paper, we investigate the feasibility of developers articulating and sharing their strategic knowledge, and the use of these strategies to support other developers in their problem-solving. We specifically investigate challenges that developers face in articulating strategies in a form in which other developers can use to increase their productivity. To observe this, we simulated a knowledge-sharing platform, asking experts to articulate one of their own strategies and then asked the second set of developers to try to use the strategies and provide feedback on the strategies to authors. During the study, we asked both strategy authors and users to reflect on the challenges they faced. In analyzing the strategies authors created, the use of the strategies, the feedback that users provided to authors, and the difficulties that authors faced addressing this feedback, we found that developers can share strategic knowledge, but authoring strategies require substantial feedback from diverse audiences to be helpful to programmers with varying prior knowledge. Our results also raise challenging questions about how …",
Helping Developers Find Debugging Hypotheses Using General Bug Descriptions and Code Analysis Techniques,"SAIGAUTAM BONAM, Abdulaziz Alaboudi, Thomas D LaToza",2020,Journal Journal of Student-Scientists' Research,"Software developers often have a difficult time debugging their code and fixing defects that cause software to behave incorrectly. When initially faced with a defect, if developers are able to formulate a correct hypothesis, debugging is usually quick. However developers often struggle to find correct hypotheses on their own. In our work, we are investigating a new approach to debugging: a tool which generates suggested hypotheses for developers to investigate. To explore this approach, we built a Chrome Developer Tools extension named Hypothesizer. Hypothesizer generates a list of relevant hypotheses based on natural language processing of the developer’s description of the defect and ranks their relevance based on analysis of the code. In the future we hope to scale Hypothesizer and allow it to automatically generate relevant hypotheses as it encounters new defects. Ultimately, we believe our work has the …",
Learning Design Rules in Code,"AYESHA KEMAL, AARAV BAJAJ, Sahar Mehrpour, Thomas LaToza",2020,Journal Journal of Student-Scientists' Research,"Developers often face difficulties in trying to understand how to write code correctly which follows a project’s design rules. In Active Documentation, developers can more easily write code correctly by following explicitly identified design rules. We are currently building a technique to mine potential design rules from code. Specifically, we devised a technique for ranking potential design rules for the user to view based on the degree of interest developers have expressed with specific code elements. We calculate degree of interest by observing the caret location of where the user has recently navigated in code and inferring related elements as well as through the searches developers have performed. Through using this data, we believe our technique may help more effectively rank potential design rules for the developer to view and inspect.",
Correcting Visual Design Errors in Presentation Slides,"STUTI GUPTA, SOMASEKHAR PATIL, Safwat Ali Khan, Thomas D LaToza",2020,Journal Journal of Student-Scientists' Research,"When creating presentation slides, users often face difficulties in staying consistent with a presentation’s visual style and may be required to refer to previous slides. This may slow the user’s work or may lead to visual design errors when users create elements inconsistent with a presentation’s visual style. In our project, a machine learning algorithm–specifically decision trees–is used to predict attributes of visual elements, including font size and the positioning of elements in relation to neighboring elements. The user can use these predictions to adjust the attributes of elements to match the presentation’s visual style, potentially helping them more quickly complete tasks and identify potential errors. We implemented this approach as a Google Slides Add-on. In the future, we hope to enable additional human-computer collaboration where users may edit the visual styles learned by the system to reflect their intent.",
Facilitating 3D Model Construction and Minimizing Parameter Definition in Programming-Based Computer Aided Design Software through the Application of Program Synthesis by Example,"Raunak Daga, Rishabh Misra, Thomas LaToza",2019/11/19,Journal Journal of Student-Scientists' Research,"Computer-Aided Design (CAD) tools are popular tools used to design and specify 3D models to analyze manufacturing opportunities, prepare objects for 3D printing, and more. CAD software, such as OpenJSCAD, often specify 3D models as programs. By representing a 3D model as a program, different model variants can be generated by simply adjusting parameters. For example, a 3D model of a ladder might have a variable number of rungs and a width, which might each be adjusted with separate parameters. Using programming-based CAD software, however, can pose difficulties. Users without programming experience may not know how to program desired specifications. In addition, even experienced programmers may over define parameters or write excessive code. Our project hopes to address these concerns by exploring ways to automatically detect parameters from programs using program synthesis …",
User-Interactive Machine Learning Model for Identifying Structural Relationships of Code Features,Ankit Gupta,2019/7/18,Journal arXiv preprint arXiv:1907.07679,"Traditional machine learning based intelligent systems assist users by learning patterns in data and making recommendations. However, these systems are limited in that the user has little means of understanding the rationale behind the systems suggestions, communicating their own understanding of patterns, or correcting system behavior. In this project, we outline a model for intelligent software based on a human computer feedback loop. The Machine Learning (ML) systems recommendations are reviewed by the user, and in turn, this information shapes the systems decision making. Our model was applied to developing an HTML editor that integrates ML with user interaction to ascertain structural relationships between HTML document features and apply them for code completion. The editor utilizes the ID3 algorithm to build decision trees, sequences of rules for predicting code the user will type. The editor displays the decision trees rules in the Interactive Rules Interface System (IRIS), which allows developers to prioritize, modify, or delete them. These interactions alter the data processed by ID3, providing the developer some control over the autocomplete system. Validation indicates that, absent user interaction, the ML model is able to predict tags with 78.4 percent accuracy, attributes with 62.9 percent accuracy, and values with 12.8 percent accuracy. Based off of the results of the user study, user interaction with the rules interface corrects feature relationships missed or mistaken by the automated process, enhancing autocomplete accuracy and developer productivity. Additionally, interaction is proven to help developers work with greater …",
Crowdsourced Behavior-Driven Development: Implementing Microservices through Microtasks,"Emad Aghayi, Thomas D LaToza, Paurav Surendra, Seyedmeysam Abolghasemi",2019/3/5,Journal arXiv preprint arXiv:1903.01977,"Key to the effectiveness of crowdsourcing approaches for software engineering is workflow design, describing how complex work is organized into small, relatively independent microtasks. In this paper, we introduce a Behavior-Driven Development (BDD) workflow for accomplishing programming work through self-contained microtasks, implemented as a preconfigured environment called Crowd Microservices. In our approach, a client, acting on behalf of a software team, describes a microservice as a set of endpoints with paths, requests, and responses. A crowd then implements the endpoints, identifying individual endpoint behaviors which they test, implement, and debug, creating new functions and interacting with persistence APIs as needed. To evaluate our approach, we conducted a feasibility study in which a small crowd worked to implement a small ToDo microservice. The crowd created an implementation with only four defects, completing 350 microtasks and implementing 13 functions. We discuss the implications of these findings for incorporating crowdsourced programming contributions into traditional software projects.",
4th International Workshop on Crowd Sourcing in Software Engineering (CSI-SE 2017),"Thomas LaToza, Ke Mao",2017/5/22,Conference 2017 IEEE/ACM 4th International Workshop on CrowdSourcing in Software Engineering (CSI-SE),"Summary form only given. CSI-SE 2017 Workshop Summary. A number of trends under the broad banner of crowdsourcing are beginning to fundamentally disrupt the way in which software is engineered. Programmers increasingly rely on crowdsourced knowledge and code, as they look to Q&A sites for answers or use code from publicly posted snippets. Programmers play, compete, and learn with the crowd, engaging in programming competitions and puzzles with crowds of programmers. Online IDEs make possible radically new forms of collaboration, allowing developers to synchronously program with crowds of distributed programmers. Programmers' reputation is increasingly visible on Q&A sites and public code repositories, opening new possibilities in how developers find jobs and companies identify talent. Crowds of non-programmers increasingly participate in development, usability testing software or …",
CrowdCode. A microtask programming platform,"FABIO RICCI, ARTURO DI LECCE",2016/4/27,Publisher Italy,"Abstract in italiano Il lavoro presentato in questa tesi è il risultato di un anno di collaborazioni effettuate con il professor Thomas LaToza (CMU) ed il professor André van der Hoek (UCI) presso il laboratorio Software Design and Collaboration Laboratory-SDCL, situato all’interno della University of California Irvine. Il crowdsourcing (da crowd,"" folla"", e sourcing, da outsourcing, e cioè esternalizzazione aziendale) è lo sviluppo collettivo di un progetto da parte di numerose perso-ne, esterne all'entità che ha ideato il progetto stesso. Negli ultimi anni, il crowdsourcing è stato ampiamente adottato dalle comunità online per lo svolgimento di svaria-te tipologie di lavoro. Esso infatti potenzialmente permetterebbe di completare in poche ore progetti che a causa della loro grandezza e complessità sono considerati inaccessibili. Attraverso il gioco Foldit [1] per esempio, 57000 utenti sono riusciti in dieci giorni a determinare la struttura molecolare di una proteina, problema per cui gli scienziati stavano lavorando da 15 anni. La riuscita nel crowdsourcing di un lavoro complesso dipende dalle possibilità che si hanno di scomporlo in microtasks. Una microtask è una piccola porzione di lavoro, risultato della scomposizione di un lavoro più grande. Ogni microtask è svolta da un singolo utente. Per scomporre un progetto in maniera efficace, bisogna fare in modo che le microtask siano quanto più possibile indipendenti tra loro, in modo che sia possibile eseguirle in parallelo. Oggigiorno la piattaforma di microtasking più conosciuta è Amazon MechanicalTurk (MTurk). I clienti si servono di MTurk per fare il crowdsourcing di tanti piccoli compiti, svolti …",
Programmers are Users Too: Human Centered Methods for Improving Tools for Programming,"Brad A Myers, Andrew J Ko, Thomas D LaToza, YoungSeok Yoon",2015,Description How did this runtime state occur?(12)[15] What runtime state changed when this executed?(2) Where was this variable last changed?(1) How is this object different from that object?(1) Why didn’t this happen?(3) How do I debug this bug in this environment?(3) In what circumstances does this bug occur?(3)[15] Which team’s component caused this bug?(1),How did this runtime state occur?(12)[15] What runtime state changed when this executed?(2) Where was this variable last changed?(1) How is this object different from that object?(1) Why didn’t this happen?(3) How do I debug this bug in this environment?(3) In what circumstances does this bug occur?(3)[15] Which team’s component caused this bug?(1),
Debugging,Thomas LaToza,2011,"Description Debugging Page 1 Debugging Thomas LaToza 05-899D: Human Aspects of Software 
Development (HASD) Spring, 2011 (C) Copyright Thomas D. LaToza Page 2 Definitions Error - 
discrepancy between actual behavior of system and intended behavior Failure - incorrect output 
value, exception, etc.; an error that has become observable Fault - lines in code which are 
incorrect Debugging: determining the cause of a failure by localizing its location to a fault 2 Page 
3 Debugging Strategies Strategies Gather execution trace data Formulate & test hypotheses 
Traverse control & data dependencies backwards (slicing) Choose which relationship to 
traverse (information foraging) 3 Page 4 Gather execution trace data Stepping in debugger 
Logging - insert print statements or wrap particular suspect functions Dump & diff - use diff tool 
to compare logging data between executions Conditional breakpoints Profiling tool - detect …",,
A crowdsourced approach to proving robot uprising safety,Thomas D LaToza,2010/4/1,Journal A Record of The Proceedings of SIGBOVIK 2010,"Robot uprisings are a serious and important problem faced by human society. Unfortunately, no automated approach for detectY ing and preventing robot uprisings has previously been devised. In this paper, we describe such an approach using a combination of model checking and crowdsourcing.",
Questions about Object Structure during Coding Activities,"Nariman Ammar, Marwan Abi-Antoun, Thomas LaToza",2010,"Description Recent tools have been designed to help developers understand the potential runtime structure of objects in a system at compile time. Such tools let developers interactively explore diagrams of object structure. But do developers ask questions about object structure? If so, when? We conducted a small pilot study of developers working on coding tasks designed to require thinking about relationships between objects. Developers did indeed ask a number of questions about various types of relationships such as containment, ownership, object identities and aliasing. Finally, some of our results revealed usability challenges tools should address to more effectively answer these questions","Recent tools have been designed to help developers understand the potential runtime structure of objects in a system at compile time. Such tools let developers interactively explore diagrams of object structure. But do developers ask questions about object structure? If so, when? We conducted a small pilot study of developers working on coding tasks designed to require thinking about relationships between objects. Developers did indeed ask a number of questions about various types of relationships such as containment, ownership, object identities and aliasing. Finally, some of our results revealed usability challenges tools should address to more effectively answer these questions",
Answering control flow questions about code,Thomas D LaToza,2008/10/19,Book Companion to the 23rd ACM SIGPLAN conference on Object-oriented programming systems languages and applications,"Empirical observations of developers editing code revealed that difficulties following control flow relationships led to poor changes, wasted time, and bugs. I am designing a static analysis to compute interprocedural path-sensitive control flow to help developers more quickly and accurately visually answer these common questions about code.",
Using architecture to change code: studying information needs,Thomas D LaToza,2006/10/22,"Book Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems, languages, and applications","While architecture is widely viewed as important, the mechanisms by which understanding architecture helps developers better change code are less clear. We are conducting a laboratory study to gather requirements for the design of future tools and techniques for making architecture more explicit while interacting with code.",
CHASE 2022,"Christoph Becker, Andrew Begel, Chris Brown, Fabio Calefato, Souti Chattopadhyay, Zadia Codabux, Tayana Conte, Carol Cárdenas-Castro, Giuseppe Destefanis, Edna Dias Canedo, Yvonne Dittrich, Neil Ernst, Fabian Fagerholm, Isabella Ferreira, Fernando Figueira Filho, Davide Fucci, Daniel Graziotin, Lucas Gren, Eduard C Groen, Hideaki Hata, Ava Heinonen, Austin Henley, Yu Huang, Daniel Izquierdo-Cortazar, Ciera Jaspan, Jil Klünder, Thomas LaToza, Filippo Lanubile, Enrique Larios Vargas, Sherlock A Licorish, Kashumi Madampe, Zainab Masood, Rahul Mohanani, Nicole Novielli, Jacob Nørbjerg, Maria Paasivaara, Rafael Prikladnicki, Fabio QB da Silva, Huilian Sophie Qiu, Luigi Quaranta, Irum Rauf","CHASE 2022: Program Committee Toggle navigation IEEE Computer Society Digital Library 
Jobs Tech News Resource Center Press Room Advertising About Us IEEE IEEE Computer 
Society IEEE Computer Society Digital Library My Subscriptions Magazines Journals Conference 
Proceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs Tech News 
Resource Center Press Room Advertising About Us Cart All Advanced Search Conference 
Cover Image Download 1.Home 2.Proceedings 3.chase 2022 CHASE 2022: Program Committee 
2022, pp. xi-xii, DOI Bookmark: Keywords Authors CHASE 2022 Program Committee Christoph 
Becker, University of Toronto, Canada Andrew Begel, Microsoft Research, United States 
Chris Brown, Virginia Tech, USA Fabio Calefato, University of Bari, Italy Souti Chattopadhyay, 
Oregon State University, United States Zadia Codabux, University of Saskatchewan…","Scholar articles CHASE 2022C Becker, A Begel, C Brown, F Calefato…All 2 versions ",,
CHASE 2021,"Rashina Hoda, Fabian Fagerholm, Sandeep Athavale, Yirsaw Ayalew, Christoph Becker, Andrew Begel, Matthias Book, Fabio Calefato, Bruno da Silva, Cleidson De Souza, Giuseppe Destefanis, Torgeir Dingsøyr, Neil Ernst, Fernando Figueira Filho, Scott Fleming, Davide Fucci, Marco Gerosa, Hideaki Hata, Ava Heinonen, Hourieh Khalajzadeh, Raula Gaikovina Kula, Sandeep Kaur Kuttal, Filippo Lanubile, Thomas Latoza, Sherlock Licorish, Tamara Lopez, Kashumi Madampe, Anuradha Madugalla, Zainab Masood, Sanjay Misra, Rahul Mohanani, Leonardo Murta, Joyce Nakatumba, Maleknaz Nayebi, James Noble, Nicole Novielli, Jacob Nørbjerg, Humphrey O Obie","Program Committee Page 1 Program Committee CHASE 2021 Program Co-Chairs Rashina 
Hoda, Monash University, Australia Fabian Fagerholm, Aalto University, Finland & Blekinge 
Institute of Technology, Sweden Program Committee Members Sandeep Athavale, TCS 
TRDDC, India Yirsaw Ayalew, University of Botswana, Botswana Christoph Becker, 
University of Toronto, Canada Andrew Begel, Microsoft, United States Matthias Book, 
University of Iceland,Iceland Fabio Calefato, University of Bari, Italy Tayana Conte, UFAM, 
Brazil Carol Cárdenascastro, S4N, Colombia Bruno da Silva, Cal Poly (California 
Polytechnic State University), United States Cleidson De Souza, Vale Institute of 
Technology and UFPA, Brazil Giuseppe Destefanis, Brunel University, United Kingdom 
Torgeir Dingsøyr, Norwegian University of Science and Technology, Norway Neil Ernst, 
University of Victoria, Canada Fernando Figueira Filho, …","Scholar articles CHASE 2021R Hoda, F Fagerholm, S Athavale, Y Ayalew, C Becker…All 2 versions ",,
NIER Program Committee,"Karim Ali, João Araújo, Arosha K Bandara, Luciano Baresi, Amel Bennaceur, Andrea Capiluppi, Siobhan Clarke, Daniela S Cruzes, Prem Devanbu, Elisabetta Di Nitto, Fatemeh Hendijani Fard, Filomena Ferrucci, Jin LC Guo, Felienne Hermans, Andreas Jedlitschka, Michele Lanza, Patricia Lago, Thomas LaToza, Xuan-Bach D Le, Yun Lin, David Lo, Ivano Malavolta, Andy Meneely, Raffaela Mirandola, Sandro Morasca, Maurizio Morisio, Gail Murphy, Leonardo Murta, Nan Niu, Romain Robbes, Emad Shihab, Damian Andrew Tamburri, Marco Torchiano, Bogdan Vasilescu, Willem Visser, Shin Yoo, Minghui Zhou","Program Committee of ICSE-NIER 2021 Toggle navigation IEEE Computer Society Digital 
Library Jobs Tech News Resource Center Press Room Advertising About Us IEEE IEEE 
Computer Society IEEE Computer Society Digital Library My Subscriptions Magazines 
Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society 
More Jobs Tech News Resource Center Press Room Advertising About Us Cart All 
Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 3.icse-nier 
2021 Program Committee of ICSE-NIER 2021 2021, pp. 14-14, DOI Bookmark: 10.1109/ICSE-NIER52604.2021.00007 
Keywords Authors Abstract Provides a listing of current committee members and society 
officers. NIER Program Committee ICSE 2021 Karim Ali, University of Alberta João Araújo, 
Universidade Nova de Lisboa Arosha K Bandara, The Open University Luciano Baresi, …","Scholar articles NIER Program CommitteeK Ali, J Araújo, AK Bandara, L Baresi, A Bennaceur…All 2 versions ",,
Information needs in programming: Lessons for programming tools from the study of programming,Thomas D LaToza,"What is programming, and why is it sometimes so frustrating and annoying and other times so fast and painless? Over the last few decades, researchers have adopted methods from psychology and human-computer interaction to understand the moment-to-moment activities of software developers, revealing in ever-expanding detail just what developers spend their time doing when they build large and complex software. Through this rapidly growing body of work, it is now possible to understand why some programming tools can help make programming easier and why others might not. In this article, we survey a few of the important lessons emerging from studies of programming and some of the new types of programming tools which have emerged motivated by these studies. While some remain early prototypes, others have begun the transition to practice and are available today in commercial and open source development environments and platforms.",Scholar articles Information needs in programming: Lessons for programming tools from the study of programmingTD LaTozaRelated articles All 2 versions ,"What is programming, and why is it sometimes so frustrating and annoying and other times so fast and painless? Over the last few decades, researchers have adopted methods from psychology and human-computer interaction to understand the moment-to-moment activities of software developers, revealing in ever-expanding detail just what developers spend their time doing when they build large and complex software. Through this rapidly growing body of work, it is now possible to understand why some programming tools can help make programming easier and why others might not. In this article, we survey a few of the important lessons emerging from studies of programming and some of the new types of programming tools which have emerged motivated by these studies. While some remain early prototypes, others have begun the transition to practice and are available today in commercial and open source development environments and platforms.",
Foreword vi Conference Committees viii Keynotes,"Yasmin B Kafai, Andreas Stefik, Abdulaziz Alaboudi, Thomas D LaToza, Mahnaz Behroozi, Chris Parnin, Titus Barik, Carrie Cai, Philip Guo, Kartik Chugh, Andrea Y Solis, Michelle Ichinco, Caitlin Kelleher, Bas Jansen, Felienne Hermans, Sean Kross, Sandeep Kuttal, Kevin Gerstner, Alexandra Bejarano, Sahar Mehrpour, Rahul K Kindi, Christopher Mendez, Lara Letaw, Margaret Burnett, Simone Stumpf, Anita Sarma, Claudia Hilderbrand, Ben Selwyn-Smith, Craig Anslow, Michael Homer, Jim Wallace, Peeratham Techapalokul, Eli Tilevich",Design Patterns and Automated Support for Block-Based Programming Activities in Non-Computing Classes 233,"Scholar articles Foreword vi Conference Committees viii KeynotesYB Kafai, A Stefik, A Alaboudi, TD LaToza, M Behroozi…All 3 versions ",Design Patterns and Automated Support for Block-Based Programming Activities in Non-Computing Classes 233,
Crowdsourced Microservices,"Emad Aghayi, Thomas D LaToza, Paurav Surendra, Seyedmeysam Abolghasemi","Abstract Behavior-Driven Development (BDD) as a popular agile software development processes commonly used in microservices development. Microservices decompose large and complex web back-ends into single-purpose services, enabling complex back-ends to be built, reused and deployed quickly. Besides, workflows in microtasks crowdsourcing organizes complex work, decomposing large tasks into small, relatively independent microtasks. In this paper, we introduce a BDD-based workflow for implementing microservices through microtasks crowdsourcing. In our approach, a client, acting on behalf of a software team, describes a microservice as a set of endpoints with paths, requests, and responses. A crowd then follows the BDD-based workflow and implements the endpoints, identifying individual endpoint behaviors which they test, write, and debug, creating new functions and interacting with persistence APIs as needed. To evaluate our approach, we conducted a feasibility study in which a small crowd worked to implement a small todo microservice, then we built a test suite and evaluated the final output of the crowd. The crowd created an implementation with only four defects, completing 350 microtasks and implementing 13 functions. We discuss the implications of these findings for incorporating crowdsourcing into software projects.","Scholar articles Crowdsourced MicroservicesE Aghayi, TD LaToza, P Surendra, S AbolghasemiRelated articles ","Abstract Behavior-Driven Development (BDD) as a popular agile software development processes commonly used in microservices development. Microservices decompose large and complex web back-ends into single-purpose services, enabling complex back-ends to be built, reused and deployed quickly. Besides, workflows in microtasks crowdsourcing organizes complex work, decomposing large tasks into small, relatively independent microtasks. In this paper, we introduce a BDD-based workflow for implementing microservices through microtasks crowdsourcing. In our approach, a client, acting on behalf of a software team, describes a microservice as a set of endpoints with paths, requests, and responses. A crowd then follows the BDD-based workflow and implements the endpoints, identifying individual endpoint behaviors which they test, write, and debug, creating new functions and interacting with persistence APIs as needed. To evaluate our approach, we conducted a feasibility study in which a small crowd worked to implement a small todo microservice, then we built a test suite and evaluated the final output of the crowd. The crowd created an implementation with only four defects, completing 350 microtasks and implementing 13 functions. We discuss the implications of these findings for incorporating crowdsourcing into software projects.",
Program Committee of ICSE-NIER 2019,"Iftekhar Ahmed, Hamid Bagheri, Xiaoying Bai, Marcio Barros UNIRIO, Paulo Borba, Yuanfang Cai, Myra Cohen, Tayana Conte UFAM, Jácome Cunha, Prem Devanbu, Elisabetta Di Nitto, Dan Hao, Felienne Hermans, Ciera Jaspan, Sandeep Kaur Kuttal, Christian Kästner, Michele Lanza, Thomas Latoza, Seok-Won Lee, Sabrina Marczak PUCRS, Gail Murphy, Nan Niu, David Piorkowski, Denys Poshyvanyk, Rahul Purandare, Baishakhi Ray, David Redmiles, Romain Robbes, Neha Rungta, Daniela S Cruzes SINTEF, Francisco Servant, Bonita Sharif, Igor Steinmacher, Margaret-Anne Storey, Bogdan Vasilescu, Willem Visser, Shin Yoo, Andy Zaidman, Minghui Zhou","Program Committee of ICSE-NIER 2019 Toggle navigation IEEE Computer Society Digital 
Library Jobs Tech News Resource Center Press Room Advertising About Us IEEE IEEE 
Computer Society IEEE Computer Society Digital Library My Subscriptions Magazines 
Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society 
More Jobs Tech News Resource Center Press Room Advertising About Us Cart All Advanced 
Search Conference Cover Image Download 1.Home 2.Proceedings 3.icse-nier 2019 Program 
Committee of ICSE-NIER 2019 2019, pp. 13-13, DOI Bookmark: 10.1109/ICSE-NIER.2019.00007 
Keywords Authors Abstract Provides a listing of current committee members and society 
officers. Program Committee of ICSE-NIER 2019 Iftekhar Ahmed University of California, Irvine 
Hamid Bagheri University of Nebraska - Lincoln Xiaoying Bai Tsinghua University Thomas Ball …","Scholar articles Program Committee of ICSE-NIER 2019I Ahmed, H Bagheri, X Bai, MB UNIRIO, P Borba, Y Cai…All 2 versions ",,
Developer Refinement of Runtime Architectural Structure,Thomas D LaToza,"Developer Refinement of Runtime Architectural Structure Page 1 Marwan Abi-Antoun Talia 
Selitsky Wayne State University Developer Refinement of Runtime Architectural Structure 
Thomas D. LaToza Carnegie Mellon University Page 2 SCHOLIA depicts runtime object 
structure Compile-time approximation of runtime object structure: Ownership Object Graph (OOG) 
Represents architecture as hierarchical encapsulation / logical containment and points-to 
relationships between objects 2 Interactive OOG viewer: - zoom / pan / scroll diagram - collapse 
/ expand object - trace to code - search by type or identifier Page 3 Pilot study of a developer 
in the field Research question What interactive features are required to help developers edit 
a reverse engineered OOG to better match their mental model of the runtime architecture? 
Previous study [PASTE'08] Selected 30-KLOC module of a 250-KLOC industrial system …",Scholar articles Developer Refinement of Runtime Architectural StructureTD LaTozaAll 2 versions ,,
Program Committee for CHASE 2018,"Maurício Aniche, Sandeep Athavale, Andrew Begel, Tayana Conte, Steve Counsell, Giuseppe Destefanis, Torgeir Dingsøyr, Yvonne Dittrich, Neil Ernst, Fabian Fagerholm, Robert Feldt, Daniel Méndez, Fernando Figueira Filho, Marco Gerosa, Irit Hadar, Tracy Hall, Hideaki Hata, Sandeep Kaur Kuttal, Filippo Lanubile, Thomas Latoza, Tamara Lopez","List of Names - Program Committee Page 1 Program Committee for CHASE 2018 Maurício 
Aniche Delft University of Technology Netherlands Sandeep Athavale TCS TRDDC India 
Andrew Begel Microsoft United States Tayana Conte UFAM Brazil Steve Counsell Brunel 
University United Kingdom Giuseppe Destefanis University of Hertfordshire United Kingdom 
Torgeir Dingsøyr Norwegian University of Science and Technology Norway Yvonne Dittrich IT 
University of Copenhagen Denmark Neil Ernst University of Victoria Canada Fabian Fagerholm 
University of Helsinki Finland Robert Feldt Chalmers University of Technology Sweden 
Daniel Méndez Fernández Technical University of Munich Germany Fernando Figueira Filho 
Federal University of Rio Grande do Norte Brazil Marco Gerosa Northern Arizona University 
United States Irit Hadar University of Haifa Israel Tracy Hall Brunel University United Kingdom …","Scholar articles Program Committee for CHASE 2018M Aniche, S Athavale, A Begel, T Conte, S Counsell…All 2 versions ",,
2017 IEEE/ACM 4th International Workshop on CrowdSourcing in Software Engineering,"Thomas LaToza, Ke Mao","Welcome to the International Workshop on Crowd-Based Requirements Engineering (CrowdRE), which is held in Ottawa (CA) on Tuesday, August 25, 2015. This is the first edition of CrowdRE at the IEEE Int. Requirements Engineering Conference, RE’15.","Scholar articles 2017 IEEE/ACM 4th International Workshop on CrowdSourcing in Software EngineeringT LaToza, K MaoAll 2 versions ","Welcome to the International Workshop on Crowd-Based Requirements Engineering (CrowdRE), which is held in Ottawa (CA) on Tuesday, August 25, 2015. This is the first edition of CrowdRE at the IEEE Int. Requirements Engineering Conference, RE’15.",
ICSE-NIER 2017,"Cristian Cadar, Lin Tan, Earl Barr, Ivan Beschastnikh, Antonio Carzaniga, TY Chen, Serge Demeyer, Alastair Donaldson, Gordon Fraser, Vijay Ganesh, Carlo Ghezzi, Milos Gligoric, Yann-Gaël Guéhéneuc, Mark Harman, Rob Hierons, Daniel Jackson, Sarfraz Khurshid, Shuvendu Lahiri, Thomas Latoza, Julia Lawall, Peng Liu, Benjamin Livshits, Shan Lu, Darko Marinov, Corina Pasareanu, John Penix, Baishakhi Ray, John Regehr, Neha Rungta, Zhendong Su, Tetsuo Tamai","Program Committee Page 1 Program Committee ICSE-NIER 2017 Program Committee Co-Chairs 
Cristian Cadar Imperial College London Lin Tan University of Waterloo Program Committee 
Earl Barr University College London Ivan Beschastnikh University of British Columbia Antonio 
Carzaniga USI - Università della Svizzera italiana TY Chen Swinburne University of 
Technology Serge Demeyer Universiteit Antwerpen (ANSYMO) Alastair Donaldson Imperial 
College London Gordon Fraser University of Sheffield Vijay Ganesh University of Waterloo 
Carlo Ghezzi Politecnico di Milano Milos Gligoric University of Texas at Austin Yann-Gaël 
Guéhéneuc École Polytechnique de Montréal Mark Harman University College London Rob 
Hierons Brunel University Daniel Jackson Massachusetts Institute of Technology Sarfraz 
Khurshid The University of Texas at Austin Shuvendu Lahiri Microsoft Research Thomas Latoza …","Scholar articles ICSE-NIER 2017C Cadar, L Tan, E Barr, I Beschastnikh, A Carzaniga…",,
CHASE 2017,"Daniel Graziotin, Rafael Prikladnicki, Meira Levy, Anita Sarma, David Socha, Maurício Aniche, Sandeep Athavale, Andrew Begel, Tayana Conte, Steve Counsell, Cleidson De Souza, Giuseppe Destefanis, Yvonne Dittrich, Neil Ernst, Fabian Fagerholm, Robert Feldt, Fernando Figueira Filho, Marco Gerosa, Irit Hadar, Hideaki Hata, Sandeep Kaur Kuttal, Filippo Lanubile, Thomas Latoza, Sabrina Marczak, Daniel Méndez Fernández, Nicole Novielli, Alexander Serebrenik, Helen Sharp, Leif Singer, Igor Steinmacher, Xiaofeng Wang","CHASE 2017 Program Committee Toggle navigation IEEE Computer Society Digital Library 
Jobs Tech News Resource Center Press Room Advertising About Us IEEE IEEE Computer 
Society IEEE Computer Society Digital Library My Subscriptions Magazines Journals 
Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs 
Tech News Resource Center Press Room Advertising About Us Cart All Advanced Search 
Conference Cover Image Download 1.Home 2.Proceedings 3.chase 2017 CHASE 2017 
Program Committee 2017, pp. ix-ix, vol. 1 DOI Bookmark: 10.1109/CHASE.2017.20 Keywords 
Authors Abstract Provides a listing of current committee members and society officers. Program 
Committee CHASE 2017 Program Committee Co-Chairs Daniel Graziotin University of Stuttgart 
Rafael Prikladnicki PUCRS Meira Levy Shenkar Engineering Design Art Anita Sarma Oregon …","Scholar articles CHASE 2017D Graziotin, R Prikladnicki, M Levy, A Sarma, D Socha…All 3 versions ",,
What makes PhD students happy?,Thomas LaToza,"What is it that makes people happy? In some sense, this is one of the most important questions society faces– how should activities and environments be designed to maximize the enjoyment people experience in their lives. Psychologists studying affect have developed several theories to explain what leads to positive experiences. One of the most popular is flow, originally formulated by Csikszentmihalyi and described in his book [2]. Through interviewing participants about their peak, enjoyable experiences and later through using“beeper” studies to study them throughout their lives, he identified several characteristics most associated with enjoyable activities: 1. A challenging activity that requires skill Flow is associated with challenging activities that requires skill to accomplish. In particular, flow occurs when the"" opportunities for action perceived by the individual are equal to his or her capabilities.""[2](p52). An activity too challenging leads to anxiety; not challenging enough leads to boredom.",Scholar articles What makes PhD students happy?T LaTozaRelated articles All 2 versions ,"What is it that makes people happy? In some sense, this is one of the most important questions society faces– how should activities and environments be designed to maximize the enjoyment people experience in their lives. Psychologists studying affect have developed several theories to explain what leads to positive experiences. One of the most popular is flow, originally formulated by Csikszentmihalyi and described in his book [2]. Through interviewing participants about their peak, enjoyable experiences and later through using“beeper” studies to study them throughout their lives, he identified several characteristics most associated with enjoyable activities: 1. A challenging activity that requires skill Flow is associated with challenging activities that requires skill to accomplish. In particular, flow occurs when the"" opportunities for action perceived by the individual are equal to his or her capabilities.""[2](p52). An activity too challenging leads to anxiety; not challenging enough leads to boredom.",
ICSE 2016,"Gail C Murphy, David S Rosenblum, Don Batory, Lionel Briand, Licia Capra, Antonio Carzaniga, TY Chen, James R Cordy, Danny Dig, Jin Song Dong, Matt Dwyer, Carlo Ghezzi, Patrice Godefroid, Alessandra Gorla, William G Griswold, Ahmed E Hassan, James D Herbsleb, André van der Hoek, Jane Cleland-Huang, Daniel Jackson, Jeff Kramer, Philippe Kruchten, Michele Lanza, Thomas LaToza, Michael R Lyu, Audris Mockus, Gian Pietro Pietro, Baishakhi Ray, Steven P Reiss","Visions of 2025 and Beyond (V2025) Committee Toggle navigation IEEE Computer Society 
Digital Library Jobs Tech News Resource Center Press Room Browse By Date Advertising 
About Us IEEE IEEE Computer Society IEEE Computer Society Digital Library My Subscriptions 
Magazines Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer 
Society More Jobs Tech News Resource Center Press Room Browse By Date Advertising About 
Us Cart All Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 
3.icse-c 2016 Visions of 2025 and Beyond (V2025) Committee 2016, pp. xxxvi-xxxvii, DOI 
Bookmark: Keywords Authors Abstract Provides a listing of current committee members and 
society officers. Visions of 2025 and Beyond Committee ,ICSE 2016 , , ,Gail C. Murphy 
(Co-Chair),University of British Columbia, Canada ,David S. Rosenblum (Co-Chair),National …","Scholar articles ICSE 2016GC Murphy, DS Rosenblum, D Batory, L Briand…All 2 versions ",,
CSI-SE 2016,"Thomas LaToza, Klaas-Jan Stol, Gordon Fraser, Leonardo Mariani, Raian Ali, Ke Mao, Lydia Chilton, Ethan Fast, Schahram Dustdar, Brian Fitzgerald, Tao Yue, André van der Hoek, Parmit Chilana, Christoph Treude, Rafael Prikladnicki, Christian Bird, Kathryn Stolee, Fabrizio Pastore, Damian Andrew Tamburri, Jan Bosch, Maja Vukovic, Laura Dabbish","Committees and Reviewers Toggle navigation IEEE Computer Society Digital Library Jobs Tech 
News Resource Center Press Room Browse By Date Advertising About Us IEEE IEEE Computer 
Society IEEE Computer Society Digital Library My Subscriptions Magazines Journals 
Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs 
Tech News Resource Center Press Room Browse By Date Advertising About Us Cart All 
Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 3.csi-se 2016 
Committees and Reviewers 2016, pp. vii-vii, DOI Bookmark: 10.1109/CSI-SE.2016.007 
Keywords Authors Abstract The conference offers a note of thanks and lists its reviewers. 
Committees ,CSI-SE 2016 , , ,Organizing Committee ,Thomas LaToza ,George Mason University, 
USA ,Klaas-Jan Stol ,University of Limerick, Ireland , , ,Steering Committee ,Gordon Fraser ,…","Scholar articles CSI-SE 2016T LaToza, KJ Stol, G Fraser, L Mariani, R Ali, K Mao…All 3 versions ",,
Should software developers be replaced by the crowd?,"Thomas D LaToza, André van der Hoek","We value our professional software developers, hire them in teams (local or remote), and set off on our merry way producing projects. This has been the status quo for a long time. But does it need to be? Could the crowd supplant the need for explicitly hired teams? More strongly yet: should the crowd perhaps replace hired employees?These are tantalizing questions, both in terms of excitement about possibilities and in terms of'fear'regarding the significant disruption that may play out in the workplace. Here, we consider several aspects of the issue of crowds versus hired employees.","Scholar articles Should software developers be replaced by the crowd?TD LaToza, A van der HoekRelated articles All 2 versions ","We value our professional software developers, hire them in teams (local or remote), and set off on our merry way producing projects. This has been the status quo for a long time. But does it need to be? Could the crowd supplant the need for explicitly hired teams? More strongly yet: should the crowd perhaps replace hired employees?",
SDCL3,"Thomas D LaToza, W Ben Towne, André van der Hoek, James D Herbsleb",“It is easier to scale Tomcat out vertically than JBoss.”“It is easier to plugin open source tools” NoSQL databases are the “hot thing”. Preference to put logic in the database Corporate requirement for in-house frameworks SQL provides more abstraction than NoSQL Preference for middleware that looks learnable Preference for technologies that endure JSON supports optional params that can be ignored J2EE “bloated” because much of it is not needed. Operations experience supporting MySQL deployment,"Scholar articles SDCL3TD LaToza, WB Towne, A van der Hoek, JD HerbslebAll 4 versions ",“It is easier to scale Tomcat out vertically than JBoss.”“It is easier to plugin open source tools” NoSQL databases are the “hot thing”. Preference to put logic in the database Corporate requirement for in-house frameworks SQL provides more abstraction than NoSQL Preference for middleware that looks learnable Preference for technologies that endure JSON supports optional params that can be ignored J2EE “bloated” because much of it is not needed. Operations experience supporting MySQL deployment,
CSI-SE 2015,"Gordon Fraser, Thomas LaToza, Leonardo Mariani, Andrew Begel, Jeffrey Bigham, Alessandro Bozzon, Parmit Chilana, Lydia Chilton, Ethan Fast, Rick Kazman, Fabrizio Pastore, Rafael Prikladnicki, Anita Sarma, Cleidson de Souza, Klaas-Jan Stol, Kathryn Stolee, Christoph Treude, Tao Yue, Bakhtiar Khan Kasi, Rafael Leano, Hong Lu, Shuai Wang","Committees and Reviewers Toggle navigation IEEE Computer Society Digital Library Jobs 
Tech News Resource Center Press Room Browse By Date Advertising About Us IEEE IEEE 
Computer Society IEEE Computer Society Digital Library My Subscriptions Magazines 
Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society 
More Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us 
Cart All Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 3.csi-se 
2015 Committees and Reviewers 2015, pp. ix-ix, DOI Bookmark: 10.1109/CSI-SE.2015.6 
Keywords Authors Committees, ,CSI,,SE, ,2015, , , ,Organizing Committee, ,Gordon Fraser , ,University 
of Sheffield, UK , ,Thomas LaToza , ,University of California at Irvine, USA , ,Leonardo 
Mariani , ,University of Milano Bicocca, Italy, , ,Program Committee, ,Andrew Begel , ,Microsoft …","Scholar articles CSI-SE 2015G Fraser, T LaToza, L Mariani, A Begel, J Bigham…All 4 versions ",,
CHASE 2015,"Andrew Begel, Rafael Prikladnicki, Yvonne Dittrich, Cleidson de Souza, Anita Sarma, Sandeep Athavale, Uli Abelein, Vivek Balaraman, Fabio Da Silva, Torgeir Dingsøyr, Arie van Deursen, Neil Ernst, Tor Erland Fægri, Fernando Figueira Filho, Marco Aurélio Gerosa, Smita Ghaisas, Tracy Hall, Orit Hazzan, Filippo Lanubile, Thomas LaToza, Walid Maalej, Sabrina Marczak, James Noble, Lutz Prechelt, Norsaremah Salleh",Provides a listing of current committee members and society officers. The conference also offers a note of thanks and lists its reviewers.,"Scholar articles CHASE 2015A Begel, R Prikladnicki, Y Dittrich, C de Souza…All 2 versions ",Provides a listing of current committee members and society officers. The conference also offers a note of thanks and lists its reviewers.,
Welcome to the User evaluation for Software Engineering Researchers workshop (USER 2012),"Andrew Begel, Caitlin Sadowski, Redmond Caitlin Sadowski, Ban Al-Ani, Margaret Burnett, Andrew J Ko, Thomas LaToza, Christopher Parnin, Lutz Prechelt, Jonathan Sillito, Helen Sharp","Thank you for coming to the first ever User evaluation for Software Engineering Researchers workshop (USER 2012). This workshop will have a unique format in which you will all collaboratively learn about and help create user studies for your own software engineering tools. We accepted a variety of archival and non-archival proposals; out of 19 archival proposal submissions, we accepted 14. We are glad that you have all decided to participate.","Scholar articles Welcome to the User evaluation for Software Engineering Researchers workshop (USER 2012)A Begel, C Sadowski, RC Sadowski, B Al-Ani…","Thank you for coming to the first ever User evaluation for Software Engineering Researchers workshop (USER 2012). This workshop will have a unique format in which you will all collaboratively learn about and help create user studies for your own software engineering tools. We accepted a variety of archival and non-archival proposals; out of 19 archival proposal submissions, we accepted 14. We are glad that you have all decided to participate.",
2012 Theses by Author,,,,,
"ALDRICH, Jonathan CMU-ISR-12-103 ALTMAN, Neal CMU-ISR-12-108 AMMAR, Waleed CMU-ISR-12-114 AZOULAY, Ariel CMU-ISR-12-106","Nels E BECKMAN, Michael BENISCH, Robert BOCCHINO, Kathleen M CARLEY, Dave COLUMBUS, Jana DIESNER, David T FILONUK, Shaohui GUO, Jason HONG, Birendra JHA, Kenneth JOSEPH, Gananand KINI, Michael KOWALCHUCK, Michael J LANHAM, Thomas David LaTOZA, Jialiu LIN, Banghui LU, Michael K MARTIN, Geoffrey P MORGAN, Karl NADEN, Jianwei NIU, Jürgen PFEFFER, Jeff REMINGA, Ashwini RAO, Norman SADEH, Darpan SAINI, Abhinav SANGAL, Noah A SMITH, Sven STORK, Jon STORRICK, Joshua SUNSHINE, Shomir WILSON","ISR TECHNICAL REPORTS 2012 Technical Reports by Author Institute for Software Research 
School of Computer Science, Carnegie Mellon University ALDRICH, Jonathan CMU-ISR-12-103 
ALTMAN, Neal CMU-ISR-12-108 AMMAR, Waleed CMU-ISR-12-114 AZOULAY, Ariel 
CMU-ISR-12-106 BECKMAN, Nels E. CMU-ISR-12-103 BENISCH, Michael CMU-ISR-12-100 
BOCCHINO, Robert CMU-ISR-12-103 CARLEY, Kathleen M. CMU-ISR-12-105, 
CMU-ISR-12-106, CMU-ISR-12-107, CMU-ISR-12-108, CMU-ISR-12-110, CMU-ISR-12-111, 
CMU-ISR-12-112 COLUMBUS, Dave CMU-ISR-12-105, CMU-ISR-12-106, CMU-ISR-12-107 
DIESNER, Jana CMU-ISR-12-101 FILONUK, David T. CMU-ISR-12-112 GUO, Shaohui 
CMU-ISR-12-100 HONG, Jason CMU-ISR-12-100 JHA, Birendra CMU-ISR-12-113 JOSEPH, 
Kenneth CMU-ISR-12-111, CMU-ISR-12-112 KINI, Gananand CMU-ISR-12-113 KOWALCHUCK, …","Scholar articles ALDRICH, Jonathan CMU-ISR-12-103 ALTMAN, Neal CMU-ISR-12-108 AMMAR, Waleed CMU-ISR-12-114 AZOULAY, Ariel CMU-ISR-12-106NE BECKMAN, M BENISCH, R BOCCHINO…All 2 versions ",,
THE UNDERSTANDING AND MODIFICATION OF PROCEDURAL AND OBJECT-ORIENTED PROGRAMS–WHEN DOES KNOWLEDGE HELP?,Thomas D LaToza,"Software bugs are an ever-increasing societal problem as computers become more prevalent in our homes and workplaces and programs grow in size and complexity. In response, many in the software engineering community have advocated a paradigm shift in the way programs are written: away from procedural or plan-like code (eg, Pascal, Fortran) and toward more declarative and map-like Object-Oriented (OO) code (eg, C++, Java). A central claim is that declarative, map-like code allows developers to better deploy their prior knowledge of the problem domain (what the code is ‘about’) than does procedural code, which typically appears as one succinct and specialized plan for solving a particular problem (a ‘recipe’or ‘directions to a destination’rather than map of the problem domain). To evaluate this claim, we conducted an experiment presenting participants with procedural and OO code isomorphs of the same abstract algorithm, and crossed this manipulation with whether participants were primed on the concrete problem solved by the algorithm (scoring ten-pin bowling). In direct contrast to the claims of the OO community, our findings instead revealed that priming background knowledge relevant to the problem domain actually helped those presented with procedural, rather than OO, code. In their first programming task (code modification), the procedural group whose bowling scoring knowledge was primed created significantly fewer bugs, while priming the OO group led to, if anything, even slightly more bugs. We interpret this finding to suggest that, when working with abstractly represented problems, familiarity with the problem domain …",Scholar articles THE UNDERSTANDING AND MODIFICATION OF PROCEDURAL AND OBJECT-ORIENTED PROGRAMS–WHEN DOES KNOWLEDGE HELP?TD LaTozaRelated articles All 4 versions ,"Software bugs are an ever-increasing societal problem as computers become more prevalent in our homes and workplaces and programs grow in size and complexity. In response, many in the software engineering community have advocated a paradigm shift in the way programs are written: away from procedural or plan-like code (eg, Pascal, Fortran) and toward more declarative and map-like Object-Oriented (OO) code (eg, C++, Java). A central claim is that declarative, map-like code allows developers to better deploy their prior knowledge of the problem domain (what the code is ‘about’) than does procedural code, which typically appears as one succinct and specialized plan for solving a particular problem (a ‘recipe’or ‘directions to a destination’rather than map of the problem domain). To evaluate this claim, we conducted an experiment presenting participants with procedural and OO code isomorphs of the same abstract algorithm, and crossed this manipulation with whether participants were primed on the concrete problem solved by the algorithm (scoring ten-pin bowling). In direct contrast to the claims of the OO community, our findings instead revealed that priming background knowledge relevant to the problem domain actually helped those presented with procedural, rather than OO, code. In their first programming task (code modification), the procedural group whose bowling scoring knowledge was primed created significantly fewer bugs, while priming the OO group led to, if anything, even slightly more bugs. We interpret this finding to suggest that, when working with abstractly represented problems, familiarity with the problem domain …",
